apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: naytife
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/part-of: naytife-platform
type: Opaque
data:
  # postgres
  postgres-user: cG9zdGdyZXM=
  # naytife-postgres-2024
  postgres-password: bmF5dGlmZS1wb3N0Z3Jlcy0yMDI0
  # naytifedb
  postgres-db: bmF5dGlmZWRi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: naytife
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/part-of: naytife-platform
data:
  01-init.sql: |
    -- Create schema for Hydra if it doesn't exist
    CREATE SCHEMA IF NOT EXISTS hydra;
    
    -- Create additional schemas as needed
    CREATE SCHEMA IF NOT EXISTS backend;
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON SCHEMA hydra TO postgres;
    GRANT ALL PRIVILEGES ON SCHEMA backend TO postgres;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: naytife
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/part-of: naytife-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        app.kubernetes.io/name: postgres
        app.kubernetes.io/part-of: naytife-platform
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        emptyDir: {}
      - name: postgres-init
        configMap:
          name: postgres-init
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: naytife
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/part-of: naytife-platform
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres
---
# NodePort service for external access during development
apiVersion: v1
kind: Service
metadata:
  name: postgres-nodeport
  namespace: naytife
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/part-of: naytife-platform
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres
