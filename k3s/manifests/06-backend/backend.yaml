apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  namespace: naytife
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/part-of: naytife-platform
type: Opaque
data:
  # postgres://postgres:naytife-postgres-2024@postgres.naytife.svc.cluster.local:5432/naytifedb?sslmode=disable
  DATABASE_URL: cG9zdGdyZXM6Ly9wb3N0Z3JlczpuYXl0aWZlLXBvc3RncmVzLTIwMjRAcG9zdGdyZXMubmF5dGlmZS5zdmMuY2x1c3Rlci5sb2NhbDo1NDMyL25heXRpZmVkYj9zc2xtb2RlPWRpc2FibGU=
  # naytife-redis-2024
  REDIS_PASSWORD: bmF5dGlmZS1yZWRpcy0yMDI0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: naytife
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/part-of: naytife-platform
data:
  PORT: "8000"
  API_URL: "http://127.0.0.1:8080"
  REDIS_ADDR: "redis.naytife.svc.cluster.local:6379"
  REDIS_URL: "redis://:naytife-redis-2024@redis.naytife.svc.cluster.local:6379"
  HYDRA_ADMIN_URL: "http://hydra-admin.naytife-auth.svc.cluster.local:4445"
  HYDRA_PUBLIC_URL: "http://hydra-public.naytife-auth.svc.cluster.local:4444"
  AUTH_HANDLER_URL: "http://auth-handler.naytife-auth.svc.cluster.local:3000"
  # Microservice URLs for Backend for Frontend pattern
  TEMPLATE_REGISTRY_URL: "http://template-registry.naytife.svc.cluster.local:9001"
  STORE_DEPLOYER_URL: "http://store-deployer.naytife.svc.cluster.local:9003"
  CORS_ALLOWED_ORIGINS: "*"
  LOG_LEVEL: "info"
  APP_ENV: "development"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: naytife
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/part-of: naytife-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        app.kubernetes.io/name: backend
        app.kubernetes.io/part-of: naytife-platform
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres.naytife.svc.cluster.local -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis.naytife.svc.cluster.local -p 6379 -a naytife-redis-2024 ping; do
            echo "Waiting for redis..."
            sleep 2
          done
      containers:
      - name: backend
        image: naytife/backend:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: backend-config
        - secretRef:
            name: backend-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 45
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 5
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
      volumes:
      - name: uploads
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: naytife
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/part-of: naytife-platform
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  selector:
    app: backend
---
# NodePort service for external access during development
apiVersion: v1
kind: Service
metadata:
  name: backend-nodeport
  namespace: naytife
  labels:
    app.kubernetes.io/name: backend
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  selector:
    app: backend
