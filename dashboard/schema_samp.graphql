"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

type Category implements Node {
  allowedAttributes: JSON!

  """Reads a single `Category` that is related to this `Category`."""
  categoryByParentId: Category
  createdAt: Datetime!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  imgUrl: String
  parentId: Int
  rowId: Int!
  seoDescription: String
  seoKeywords: String
  seoTitle: String
  slug: String!
  title: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `Category` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CategoryCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

"""A connection to a list of `Category` values."""
type CategoryConnection {
  """
  A list of edges which contains the `Category` and cursor to aid in pagination.
  """
  edges: [CategoryEdge]!

  """A list of `Category` objects."""
  nodes: [Category]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection."""
type CategoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Category` at the end of the edge."""
  node: Category
}

"""An input for mutations affecting `Category`"""
input CategoryInput {
  allowedAttributes: JSON!
  createdAt: Datetime
  imgUrl: String
  parentId: Int
  rowId: Int
  seoDescription: String
  seoKeywords: String
  seoTitle: String
  slug: String!
  title: String!
  updatedAt: Datetime
}

"""Methods to use when ordering `Category`."""
enum CategoryOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

"""
Represents an update to a `Category`. Fields that are set will be updated.
"""
input CategoryPatch {
  allowedAttributes: JSON
  createdAt: Datetime
  imgUrl: String
  parentId: Int
  rowId: Int
  seoDescription: String
  seoKeywords: String
  seoTitle: String
  slug: String
  title: String
  updatedAt: Datetime
}

"""All input for the create `Category` mutation."""
input CreateCategoryInput {
  """The `Category` to be created by this mutation."""
  category: CategoryInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Category` mutation."""
type CreateCategoryPayload {
  """The `Category` that was created by this mutation."""
  category: Category

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoryOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CategoryEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Product` mutation."""
input CreateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Product` to be created by this mutation."""
  product: ProductInput!
}

"""The output of our create `Product` mutation."""
type CreateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was created by this mutation."""
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ProductEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ProductVariation` mutation."""
input CreateProductVariationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProductVariation` to be created by this mutation."""
  productVariation: ProductVariationInput!
}

"""The output of our create `ProductVariation` mutation."""
type CreateProductVariationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductVariation` that was created by this mutation."""
  productVariation: ProductVariation

  """An edge for our `ProductVariation`. May be used by Relay 1."""
  productVariationEdge(
    """The method to use when ordering `ProductVariation`."""
    orderBy: [ProductVariationOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ProductVariationEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Shop` mutation."""
input CreateShopInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Shop` to be created by this mutation."""
  shop: ShopInput!
}

"""The output of our create `Shop` mutation."""
type CreateShopPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Shop` that was created by this mutation."""
  shop: Shop

  """An edge for our `Shop`. May be used by Relay 1."""
  shopEdge(
    """The method to use when ordering `Shop`."""
    orderBy: [ShopOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ShopEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

"""All input for the `deleteCategoryByRowId` mutation."""
input DeleteCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `deleteCategoryBySlug` mutation."""
input DeleteCategoryBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!
}

"""All input for the `deleteCategory` mutation."""
input DeleteCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Category` mutation."""
type DeleteCategoryPayload {
  """The `Category` that was deleted by this mutation."""
  category: Category

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoryOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CategoryEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCategoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProductByRowId` mutation."""
input DeleteProductByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `deleteProduct` mutation."""
input DeleteProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Product` mutation."""
type DeleteProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProductId: ID

  """The `Product` that was deleted by this mutation."""
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ProductEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProductVariationByRowId` mutation."""
input DeleteProductVariationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `deleteProductVariationBySlug` mutation."""
input DeleteProductVariationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!
}

"""All input for the `deleteProductVariation` mutation."""
input DeleteProductVariationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProductVariation` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProductVariation` mutation."""
type DeleteProductVariationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProductVariationId: ID

  """The `ProductVariation` that was deleted by this mutation."""
  productVariation: ProductVariation

  """An edge for our `ProductVariation`. May be used by Relay 1."""
  productVariationEdge(
    """The method to use when ordering `ProductVariation`."""
    orderBy: [ProductVariationOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ProductVariationEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteShopByDomain` mutation."""
input DeleteShopByDomainInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  domain: String!
}

"""All input for the `deleteShopByRowId` mutation."""
input DeleteShopByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `deleteShopBySlug` mutation."""
input DeleteShopBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!
}

"""All input for the `deleteShop` mutation."""
input DeleteShopInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Shop` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Shop` mutation."""
type DeleteShopPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedShopId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Shop` that was deleted by this mutation."""
  shop: Shop

  """An edge for our `Shop`. May be used by Relay 1."""
  shopEdge(
    """The method to use when ordering `Shop`."""
    orderBy: [ShopOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ShopEdge
}

"""
Represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Category`."""
  createCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """Creates a single `Product`."""
  createProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductInput!
  ): CreateProductPayload

  """Creates a single `ProductVariation`."""
  createProductVariation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductVariationInput!
  ): CreateProductVariationPayload

  """Creates a single `Shop`."""
  createShop(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateShopInput!
  ): CreateShopPayload

  """Deletes a single `Category` using its globally unique id."""
  deleteCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  """Deletes a single `Category` using a unique key."""
  deleteCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryByRowIdInput!
  ): DeleteCategoryPayload

  """Deletes a single `Category` using a unique key."""
  deleteCategoryBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryBySlugInput!
  ): DeleteCategoryPayload

  """Deletes a single `Product` using its globally unique id."""
  deleteProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductInput!
  ): DeleteProductPayload

  """Deletes a single `Product` using a unique key."""
  deleteProductByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByRowIdInput!
  ): DeleteProductPayload

  """Deletes a single `ProductVariation` using its globally unique id."""
  deleteProductVariation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductVariationInput!
  ): DeleteProductVariationPayload

  """Deletes a single `ProductVariation` using a unique key."""
  deleteProductVariationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductVariationByRowIdInput!
  ): DeleteProductVariationPayload

  """Deletes a single `ProductVariation` using a unique key."""
  deleteProductVariationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductVariationBySlugInput!
  ): DeleteProductVariationPayload

  """Deletes a single `Shop` using its globally unique id."""
  deleteShop(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteShopInput!
  ): DeleteShopPayload

  """Deletes a single `Shop` using a unique key."""
  deleteShopByDomain(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteShopByDomainInput!
  ): DeleteShopPayload

  """Deletes a single `Shop` using a unique key."""
  deleteShopByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteShopByRowIdInput!
  ): DeleteShopPayload

  """Deletes a single `Shop` using a unique key."""
  deleteShopBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteShopBySlugInput!
  ): DeleteShopPayload

  """Updates a single `Category` using its globally unique id and a patch."""
  updateCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """Updates a single `Category` using a unique key and a patch."""
  updateCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryByRowIdInput!
  ): UpdateCategoryPayload

  """Updates a single `Category` using a unique key and a patch."""
  updateCategoryBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryBySlugInput!
  ): UpdateCategoryPayload

  """Updates a single `Product` using its globally unique id and a patch."""
  updateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductInput!
  ): UpdateProductPayload

  """Updates a single `Product` using a unique key and a patch."""
  updateProductByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByRowIdInput!
  ): UpdateProductPayload

  """
  Updates a single `ProductVariation` using its globally unique id and a patch.
  """
  updateProductVariation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductVariationInput!
  ): UpdateProductVariationPayload

  """Updates a single `ProductVariation` using a unique key and a patch."""
  updateProductVariationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductVariationByRowIdInput!
  ): UpdateProductVariationPayload

  """Updates a single `ProductVariation` using a unique key and a patch."""
  updateProductVariationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductVariationBySlugInput!
  ): UpdateProductVariationPayload

  """Updates a single `Shop` using its globally unique id and a patch."""
  updateShop(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateShopInput!
  ): UpdateShopPayload

  """Updates a single `Shop` using a unique key and a patch."""
  updateShopByDomain(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateShopByDomainInput!
  ): UpdateShopPayload

  """Updates a single `Shop` using a unique key and a patch."""
  updateShopByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateShopByRowIdInput!
  ): UpdateShopPayload

  """Updates a single `Shop` using a unique key and a patch."""
  updateShopBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateShopBySlugInput!
  ): UpdateShopPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Product implements Node {
  """Reads a single `Category` that is related to this `Product`."""
  categoryByCategoryId: Category
  categoryId: Int
  createdAt: Datetime!
  defaultVariantId: Int
  description: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `ProductVariation` that is related to this `Product`."""
  productVariationByDefaultVariantId: ProductVariation
  rowId: Int!
  status: String!
  title: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `Product` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProductCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `Product` values."""
type ProductConnection {
  """
  A list of edges which contains the `Product` and cursor to aid in pagination.
  """
  edges: [ProductEdge]!

  """A list of `Product` objects."""
  nodes: [Product]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection."""
type ProductEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""An input for mutations affecting `Product`"""
input ProductInput {
  categoryId: Int
  createdAt: Datetime
  defaultVariantId: Int
  description: String
  rowId: Int
  status: String!
  title: String!
  updatedAt: Datetime
}

"""Methods to use when ordering `Product`."""
enum ProductOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Product`. Fields that are set will be updated.
"""
input ProductPatch {
  categoryId: Int
  createdAt: Datetime
  defaultVariantId: Int
  description: String
  rowId: Int
  status: String
  title: String
  updatedAt: Datetime
}

type ProductVariation implements Node {
  attributes: JSON!
  createdAt: Datetime!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  imgUrl: String
  price: BigFloat!

  """Reads a single `Product` that is related to this `ProductVariation`."""
  productByProductId: Product
  productId: Int
  quantity: Int!
  rowId: Int!
  seoDescription: String
  seoKeywords: String
  seoTitle: String

  """Reads a single `Shop` that is related to this `ProductVariation`."""
  shopByShopId: Shop
  shopId: Int
  slug: String!
  title: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `ProductVariation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProductVariationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

"""A connection to a list of `ProductVariation` values."""
type ProductVariationConnection {
  """
  A list of edges which contains the `ProductVariation` and cursor to aid in pagination.
  """
  edges: [ProductVariationEdge]!

  """A list of `ProductVariation` objects."""
  nodes: [ProductVariation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProductVariation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProductVariation` edge in the connection."""
type ProductVariationEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProductVariation` at the end of the edge."""
  node: ProductVariation
}

"""An input for mutations affecting `ProductVariation`"""
input ProductVariationInput {
  attributes: JSON!
  createdAt: Datetime
  imgUrl: String
  price: BigFloat!
  productId: Int
  quantity: Int!
  rowId: Int
  seoDescription: String
  seoKeywords: String
  seoTitle: String
  shopId: Int
  slug: String!
  title: String!
  updatedAt: Datetime
}

"""Methods to use when ordering `ProductVariation`."""
enum ProductVariationOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

"""
Represents an update to a `ProductVariation`. Fields that are set will be updated.
"""
input ProductVariationPatch {
  attributes: JSON
  createdAt: Datetime
  imgUrl: String
  price: BigFloat
  productId: Int
  quantity: Int
  rowId: Int
  seoDescription: String
  seoKeywords: String
  seoTitle: String
  shopId: Int
  slug: String
  title: String
  updatedAt: Datetime
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `Category`."""
  allCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Category`."""
    orderBy: [CategoryOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoryConnection

  """Reads and enables pagination through a set of `ProductVariation`."""
  allProductVariations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductVariationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProductVariation`."""
    orderBy: [ProductVariationOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductVariationConnection

  """Reads and enables pagination through a set of `Product`."""
  allProducts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductConnection

  """Reads and enables pagination through a set of `Shop`."""
  allShops(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ShopCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Shop`."""
    orderBy: [ShopOrderBy!] = [PRIMARY_KEY_ASC]
  ): ShopConnection

  """Reads a single `Category` using its globally unique `ID`."""
  category(
    """The globally unique `ID` to be used in selecting a single `Category`."""
    id: ID!
  ): Category

  """Get a single `Category`."""
  categoryByRowId(rowId: Int!): Category

  """Get a single `Category`."""
  categoryBySlug(slug: String!): Category

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads a single `Product` using its globally unique `ID`."""
  product(
    """The globally unique `ID` to be used in selecting a single `Product`."""
    id: ID!
  ): Product

  """Get a single `Product`."""
  productByRowId(rowId: Int!): Product

  """Reads a single `ProductVariation` using its globally unique `ID`."""
  productVariation(
    """
    The globally unique `ID` to be used in selecting a single `ProductVariation`.
    """
    id: ID!
  ): ProductVariation

  """Get a single `ProductVariation`."""
  productVariationByRowId(rowId: Int!): ProductVariation

  """Get a single `ProductVariation`."""
  productVariationBySlug(slug: String!): ProductVariation

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `Shop` using its globally unique `ID`."""
  shop(
    """The globally unique `ID` to be used in selecting a single `Shop`."""
    id: ID!
  ): Shop

  """Get a single `Shop`."""
  shopByDomain(domain: String!): Shop

  """Get a single `Shop`."""
  shopByRowId(rowId: Int!): Shop

  """Get a single `Shop`."""
  shopBySlug(slug: String!): Shop
}

type Shop implements Node {
  about: String
  contactEmail: String
  contactPhone: String
  createdAt: Datetime!
  currency: String!
  domain: String!
  faviconUrl: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  logoUrl: String
  ownerId: UUID!
  rowId: Int!
  seoDescription: String
  seoKeywords: String
  seoTitle: String
  slug: String!
  status: String!
  templateId: UUID!
  title: String!
  updatedAt: Datetime!
  whatsapp: String
}

"""
A condition to be used against `Shop` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ShopCondition {
  """Checks for equality with the object’s `domain` field."""
  domain: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

"""A connection to a list of `Shop` values."""
type ShopConnection {
  """
  A list of edges which contains the `Shop` and cursor to aid in pagination.
  """
  edges: [ShopEdge]!

  """A list of `Shop` objects."""
  nodes: [Shop]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Shop` you could get from the connection."""
  totalCount: Int!
}

"""A `Shop` edge in the connection."""
type ShopEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Shop` at the end of the edge."""
  node: Shop
}

"""An input for mutations affecting `Shop`"""
input ShopInput {
  about: String
  contactEmail: String
  contactPhone: String
  createdAt: Datetime
  currency: String!
  domain: String!
  faviconUrl: String
  logoUrl: String
  ownerId: UUID!
  rowId: Int
  seoDescription: String
  seoKeywords: String
  seoTitle: String
  slug: String!
  status: String!
  templateId: UUID!
  title: String!
  updatedAt: Datetime
  whatsapp: String
}

"""Methods to use when ordering `Shop`."""
enum ShopOrderBy {
  DOMAIN_ASC
  DOMAIN_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

"""Represents an update to a `Shop`. Fields that are set will be updated."""
input ShopPatch {
  about: String
  contactEmail: String
  contactPhone: String
  createdAt: Datetime
  currency: String
  domain: String
  faviconUrl: String
  logoUrl: String
  ownerId: UUID
  rowId: Int
  seoDescription: String
  seoKeywords: String
  seoTitle: String
  slug: String
  status: String
  templateId: UUID
  title: String
  updatedAt: Datetime
  whatsapp: String
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateCategoryByRowId` mutation."""
input UpdateCategoryByRowIdInput {
  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `updateCategoryBySlug` mutation."""
input UpdateCategoryBySlugInput {
  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!
}

"""All input for the `updateCategory` mutation."""
input UpdateCategoryInput {
  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be updated.
  """
  id: ID!
}

"""The output of our update `Category` mutation."""
type UpdateCategoryPayload {
  """The `Category` that was updated by this mutation."""
  category: Category

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoryOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CategoryEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProductByRowId` mutation."""
input UpdateProductByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!
  rowId: Int!
}

"""All input for the `updateProduct` mutation."""
input UpdateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!
}

"""The output of our update `Product` mutation."""
type UpdateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was updated by this mutation."""
  product: Product

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ProductEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProductVariationByRowId` mutation."""
input UpdateProductVariationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProductVariation` being updated.
  """
  productVariationPatch: ProductVariationPatch!
  rowId: Int!
}

"""All input for the `updateProductVariationBySlug` mutation."""
input UpdateProductVariationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProductVariation` being updated.
  """
  productVariationPatch: ProductVariationPatch!
  slug: String!
}

"""All input for the `updateProductVariation` mutation."""
input UpdateProductVariationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProductVariation` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProductVariation` being updated.
  """
  productVariationPatch: ProductVariationPatch!
}

"""The output of our update `ProductVariation` mutation."""
type UpdateProductVariationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductVariation` that was updated by this mutation."""
  productVariation: ProductVariation

  """An edge for our `ProductVariation`. May be used by Relay 1."""
  productVariationEdge(
    """The method to use when ordering `ProductVariation`."""
    orderBy: [ProductVariationOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ProductVariationEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateShopByDomain` mutation."""
input UpdateShopByDomainInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  domain: String!

  """
  An object where the defined keys will be set on the `Shop` being updated.
  """
  shopPatch: ShopPatch!
}

"""All input for the `updateShopByRowId` mutation."""
input UpdateShopByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!

  """
  An object where the defined keys will be set on the `Shop` being updated.
  """
  shopPatch: ShopPatch!
}

"""All input for the `updateShopBySlug` mutation."""
input UpdateShopBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Shop` being updated.
  """
  shopPatch: ShopPatch!
  slug: String!
}

"""All input for the `updateShop` mutation."""
input UpdateShopInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Shop` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Shop` being updated.
  """
  shopPatch: ShopPatch!
}

"""The output of our update `Shop` mutation."""
type UpdateShopPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Shop` that was updated by this mutation."""
  shop: Shop

  """An edge for our `Shop`. May be used by Relay 1."""
  shopEdge(
    """The method to use when ordering `Shop`."""
    orderBy: [ShopOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ShopEdge
}
