package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"strconv"

	"github.com/petrejonn/naytife/internal/db"
	"github.com/petrejonn/naytife/internal/gql/admin/generated"
	"github.com/petrejonn/naytife/internal/gql/admin/model"
)

// UpdateShop is the resolver for the updateShop field.
func (r *mutationResolver) UpdateShop(ctx context.Context, shop model.UpdateShopInput) (model.UpdateShopPayload, error) {
	shopID := ctx.Value("shop_id").(int64)
	if shop.ContactPhone != nil && !isValidE164(*shop.ContactPhone) {
		return nil, fmt.Errorf("invalid E164 phone number")
	}
	if shop.WhatsAppNumber != nil && !isValidE164(*shop.WhatsAppNumber) {
		return nil, fmt.Errorf("invalid E164 phone number")
	}
	params := db.UpdateShopParams{
		ShopID:              shopID,
		Title:               shop.Title,
		CurrencyCode:        shop.CurrencyCode,
		About:               shop.About,
		SeoTitle:            shop.SeoTitle,
		SeoDescription:      shop.SeoDescription,
		Email:               shop.ContactEmail,
		PhoneNumber:         shop.ContactPhone,
		WhatsappPhoneNumber: shop.WhatsAppNumber,
		WhatsappLink:        shop.WhatsAppLink,
		FacebookLink:        shop.FacebookLink,
		InstagramLink:       shop.InstagramLink,
	}

	if shop.Address != nil {
		params.Address = &shop.Address.Address
	}

	dbShop, err := r.Repository.UpdateShop(ctx, params)

	if err != nil {
		return nil, err
	}
	return &model.UpdateShopSuccess{Shop: &model.Shop{
		CurrencyCode:   dbShop.CurrencyCode,
		Status:         model.ShopStatus(dbShop.Status),
		Title:          dbShop.Title,
		DefaultDomain:  dbShop.Domain,
		About:          dbShop.About,
		SeoTitle:       dbShop.SeoTitle,
		SeoDescription: dbShop.SeoDescription,
		ContactEmail:   &dbShop.Email,
		ContactPhone:   dbShop.PhoneNumber,
		UpdatedAt:      dbShop.UpdatedAt.Time,
		CreatedAt:      dbShop.CreatedAt.Time,
		WhatsAppNumber: dbShop.WhatsappPhoneNumber,
		WhatsAppLink:   dbShop.WhatsappLink,
		FacebookLink:   dbShop.FacebookLink,
		InstagramLink:  dbShop.InstagramLink,
		Address: &model.ShopAddress{
			Address: safeStringDereference(dbShop.Address),
		},
	}}, nil
}

// UpdateShopImages is the resolver for the updateShopImages field.
func (r *mutationResolver) UpdateShopImages(ctx context.Context, input model.UpdateShopImagesInput) (model.UpdateShopImagesPayload, error) {
	panic(fmt.Errorf("not implemented: UpdateShopImages - updateShopImages"))
}

// Shop is the resolver for the shop field.
func (r *queryResolver) Shop(ctx context.Context) (*model.Shop, error) {
	shopID := ctx.Value("shop_id").(int64)
	shop, err := r.Repository.GetShop(ctx, shopID)
	if err != nil {
		return nil, err
	}
	return &model.Shop{
		Title:          shop.Title,
		DefaultDomain:  shop.Domain,
		CurrencyCode:   shop.CurrencyCode,
		Status:         model.ShopStatus(shop.Status),
		About:          shop.About,
		SeoDescription: shop.SeoDescription,
		SeoTitle:       shop.SeoTitle,
		UpdatedAt:      shop.UpdatedAt.Time,
		CreatedAt:      shop.CreatedAt.Time,
		WhatsAppNumber: shop.WhatsappPhoneNumber,
		WhatsAppLink:   shop.WhatsappLink,
		FacebookLink:   shop.FacebookLink,
		InstagramLink:  shop.InstagramLink,
		ContactEmail:   &shop.Email,
		ContactPhone:   shop.PhoneNumber,
		Address: &model.ShopAddress{
			Address: safeStringDereference(shop.Address),
		},
	}, nil
}

// ID is the resolver for the id field.
func (r *shopResolver) ID(ctx context.Context, obj *model.Shop) (string, error) {
	// Return the base64-encoded ID
	return encodeRelayID("Category", obj.ID), nil
}

// Products is the resolver for the products field.
func (r *shopResolver) Products(ctx context.Context, obj *model.Shop, first *int, after *string) (*model.ProductConnection, error) {
	shopID := ctx.Value("shop_id").(int64)
	limit := 20
	if first != nil {
		limit = *first
	}
	afterID := int64(0)
	if after != nil {
		decodedType, id, err := decodeRelayID(*after)
		if err != nil {
			return nil, fmt.Errorf("invalid after cursor: %w", err)
		}
		if decodedType != "Product" {
			return nil, fmt.Errorf("expected after cursor type 'Product', got '%s'", decodedType)
		}
		if id != nil {
			afterID = *id
		}
	}
	productsDB, err := r.Repository.GetProducts(ctx, db.GetProductsParams{ShopID: shopID, After: afterID, Limit: int32(limit) + 1})
	if err != nil {
		return nil, fmt.Errorf("failed to fetch products: %w", err)
	}
	hasNextPage := len(productsDB) > limit
	if hasNextPage {
		productsDB = productsDB[:limit]
	}
	edges := make([]model.ProductEdge, len(productsDB))
	for i, prod := range productsDB {
		var attributes []model.AllowedProductAttributes
		// if prod.AllowedAttributes != nil {
		// 	attributes, err = unmarshalAllowedProductAttributes(prod.AllowedAttributes)
		// 	if err != nil {
		// 		return nil, fmt.Errorf("failed to unmarshal allowed attributes: %w", err)
		// 	}
		// }
		relayID := encodeRelayID("Product", strconv.FormatInt(prod.ProductID, 10))
		edges[i] = model.ProductEdge{Cursor: relayID, Node: &model.Product{
			ID:          strconv.FormatInt(prod.ProductID, 10),
			Title:       prod.Title,
			Description: prod.Description,
			CreatedAt:   prod.CreatedAt.Time,
			UpdatedAt:   prod.UpdatedAt.Time,
			// Status:            (*model.ProductStatus)(&prod.Status),
			AllowedAttributes: attributes,
		}}
	}
	var startCursor, endCursor *string
	if len(productsDB) > 0 {
		firstCursor := encodeRelayID("Product", strconv.FormatInt(productsDB[0].ProductID, 10))
		lastCursor := encodeRelayID("Product", strconv.FormatInt(productsDB[len(productsDB)-1].ProductID, 10))
		startCursor, endCursor = &firstCursor, &lastCursor
	}

	pageInfo := &model.PageInfo{
		HasNextPage: hasNextPage,
		StartCursor: safeStringDereference(startCursor),
		EndCursor:   safeStringDereference(endCursor),
	}

	return &model.ProductConnection{
		Edges:      edges,
		PageInfo:   pageInfo,
		TotalCount: len(productsDB),
	}, nil
}

// Categories is the resolver for the categories field.
func (r *shopResolver) Categories(ctx context.Context, obj *model.Shop, first *int, after *string) (*model.CategoryConnection, error) {
	shopID := ctx.Value("shop_id").(int64)
	limit := 20
	if first != nil {
		limit = *first
	}
	afterID := int64(0)
	if after != nil {
		decodedType, id, err := decodeRelayID(*after)
		if err != nil {
			return nil, fmt.Errorf("invalid after cursor: %w", err)
		}
		if decodedType != "Category" {
			return nil, fmt.Errorf("expected after cursor type 'Category', got '%s'", decodedType)
		}
		if id != nil {
			afterID = *id
		}
	}
	categoriesDB, err := r.Repository.GetCategories(ctx, db.GetCategoriesParams{ShopID: shopID, After: afterID, Limit: int32(limit) + 1})
	if err != nil {
		return nil, fmt.Errorf("failed to fetch categories: %w", err)
	}
	hasNextPage := len(categoriesDB) > limit
	if hasNextPage {
		categoriesDB = categoriesDB[:limit]
	}
	edges := make([]model.CategoryEdge, len(categoriesDB))
	for i, cat := range categoriesDB {
		relayID := encodeRelayID("Category", strconv.FormatInt(cat.CategoryID, 10))
		edges[i] = model.CategoryEdge{Cursor: relayID, Node: &model.Category{
			ID:          strconv.FormatInt(cat.CategoryID, 10),
			Slug:        cat.Slug,
			Title:       cat.Title,
			Description: cat.Description,
		}}
	}
	var startCursor, endCursor *string
	if len(categoriesDB) > 0 {
		firstCursor := encodeRelayID("Category", strconv.FormatInt(categoriesDB[0].CategoryID, 10))
		lastCursor := encodeRelayID("Category", strconv.FormatInt(categoriesDB[len(categoriesDB)-1].CategoryID, 10))
		startCursor, endCursor = &firstCursor, &lastCursor
	}

	pageInfo := &model.PageInfo{
		HasNextPage: hasNextPage,
		StartCursor: safeStringDereference(startCursor),
		EndCursor:   safeStringDereference(endCursor),
	}

	// Return the CategoryConnection result
	return &model.CategoryConnection{
		Edges:      edges,
		PageInfo:   pageInfo,
		TotalCount: len(categoriesDB),
	}, nil
}

// Images is the resolver for the images field.
func (r *shopResolver) Images(ctx context.Context, obj *model.Shop) (*model.ShopImages, error) {
	shopID := ctx.Value("shop_id").(int64)
	imagesDB, err := r.Repository.GetShopImages(ctx, shopID)
	if err != nil {
		return nil, fmt.Errorf("internal server error %w", err)
	}
	return &model.ShopImages{
		SiteLogo:   &model.Image{URL: safeStringDereference(imagesDB.LogoUrl), AltText: nil},
		Favicon:    &model.Image{URL: safeStringDereference(imagesDB.FaviconUrl), AltText: nil},
		Banner:     &model.Image{URL: safeStringDereference(imagesDB.BannerUrl), AltText: nil},
		CoverImage: &model.Image{URL: safeStringDereference(imagesDB.CoverImageUrl), AltText: nil},
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Shop returns generated.ShopResolver implementation.
func (r *Resolver) Shop() generated.ShopResolver { return &shopResolver{r} }

type mutationResolver struct{ *Resolver }
type shopResolver struct{ *Resolver }
