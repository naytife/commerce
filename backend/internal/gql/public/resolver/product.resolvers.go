package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"errors"
	"fmt"
	"log"
	"strconv"

	"github.com/petrejonn/naytife/internal/db"
	"github.com/petrejonn/naytife/internal/gql/public/generated"
	"github.com/petrejonn/naytife/internal/gql/public/model"
)

// ID is the resolver for the id field.
func (r *productResolver) ID(ctx context.Context, obj *model.Product) (string, error) {
	return encodeRelayID("Product", obj.ID), nil
}

// DefaultVariant is the resolver for the defaultVariant field.
func (r *productResolver) DefaultVariant(ctx context.Context, obj *model.Product) (*model.ProductVariant, error) {
	panic(fmt.Errorf("not implemented: DefaultVariant - defaultVariant"))
}

// Variants is the resolver for the variants field.
func (r *productResolver) Variants(ctx context.Context, obj *model.Product) ([]model.ProductVariant, error) {
	shopID := ctx.Value("shop_id").(int64)
	objID, err := strconv.Atoi(obj.ID)
	if err != nil {
		return nil, errors.New("invalid product id")
	}
	objsDB, err := r.Repository.GetProductVariations(ctx, db.GetProductVariationsParams{ShopID: shopID, ProductID: int64(objID)})
	if err != nil {
		return nil, errors.New("could not fetch objects")
	}
	objs := make([]model.ProductVariant, 0, len(objsDB))
	for _, objDB := range objsDB {
		priceFloat64, err := objDB.Price.Float64Value()
		if err != nil {
			log.Fatalf("Failed to convert pgtype.Numeric to float64: %v", err)
		}
		attributes, err := unmarshalProductAttributes(objDB.Attributes)
		if err != nil {
			log.Fatalf("Failed to unmarshal product attributes: %v", err)
		}
		objs = append(objs, model.ProductVariant{
			ID:                encodeRelayID("Variant", strconv.FormatInt(objDB.ProductVariationID, 10)),
			Slug:              objDB.Slug,
			Description:       objDB.Description,
			Price:             priceFloat64.Float64,
			AvailableQuantity: int(objDB.AvailableQuantity),
			Attributes:        attributes,
			UpdatedAt:         objDB.UpdatedAt.Time,
			CreatedAt:         objDB.CreatedAt.Time,
		})
	}
	return objs, nil
}

// Images is the resolver for the images field.
func (r *productResolver) Images(ctx context.Context, obj *model.Product) ([]model.Image, error) {
	panic(fmt.Errorf("not implemented: Images - images"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, first *int, after *string) (*model.ProductConnection, error) {
	shopID := ctx.Value("shop_id").(int64)
	limit := 20
	if first != nil {
		limit = *first
	}
	afterID := int64(0)
	if after != nil {
		decodedType, id, err := decodeRelayID(*after)
		if err != nil {
			return nil, fmt.Errorf("invalid after cursor: %w", err)
		}
		if decodedType != "Product" {
			return nil, fmt.Errorf("expected after cursor type 'Product', got '%s'", decodedType)
		}
		if id != nil {
			afterID = *id
		}
	}
	objsDB, err := r.Repository.GetProducts(ctx, db.GetProductsParams{ShopID: shopID, After: afterID, Limit: int32(limit) + 1})
	if err != nil {
		return nil, fmt.Errorf("failed to fetch products: %w", err)
	}
	hasNextPage := len(objsDB) > limit
	if hasNextPage {
		objsDB = objsDB[:limit]
	}
	edges := make([]model.ProductEdge, len(objsDB))
	for i, prod := range objsDB {
		relayID := encodeRelayID("Product", strconv.FormatInt(prod.ProductID, 10))
		edges[i] = model.ProductEdge{Cursor: relayID, Node: &model.Product{
			ID:          strconv.FormatInt(prod.ProductID, 10),
			Title:       prod.Title,
			Description: prod.Description,
			CreatedAt:   prod.CreatedAt.Time,
			UpdatedAt:   prod.UpdatedAt.Time,
		}}
	}
	var startCursor, endCursor *string
	if len(objsDB) > 0 {
		firstCursor := encodeRelayID("Product", strconv.FormatInt(objsDB[0].ProductID, 10))
		lastCursor := encodeRelayID("Product", strconv.FormatInt(objsDB[len(objsDB)-1].ProductID, 10))
		startCursor, endCursor = &firstCursor, &lastCursor
	}

	pageInfo := &model.PageInfo{
		HasNextPage: hasNextPage,
		StartCursor: safeStringDereference(startCursor),
		EndCursor:   safeStringDereference(endCursor),
	}

	return &model.ProductConnection{
		Edges:      edges,
		PageInfo:   pageInfo,
		TotalCount: len(objsDB),
	}, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	shopID := ctx.Value("shop_id").(int64)
	_, objID, err := decodeRelayID(id)
	if err != nil {
		return nil, errors.New("invalid projec ID")
	}
	objDB, err := r.Repository.GetProduct(ctx, db.GetProductParams{ShopID: shopID, ProductID: *objID})
	if err != nil {
		return nil, errors.New("could not find object")
	}
	return &model.Product{
		ID:          strconv.FormatInt(objDB.ProductID, 10),
		Title:       objDB.Title,
		Description: objDB.Description,
		CreatedAt:   objDB.CreatedAt.Time,
		UpdatedAt:   objDB.UpdatedAt.Time,
	}, nil
}

// Product returns generated.ProductResolver implementation.
func (r *Resolver) Product() generated.ProductResolver { return &productResolver{r} }

type productResolver struct{ *Resolver }
