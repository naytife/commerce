// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
	GetID() string
}

type UserError interface {
	IsUserError()
	GetMessage() string
	GetCode() ErrorCode
	GetPath() []string
}

type Category struct {
	ID          string             `json:"id"`
	Slug        string             `json:"slug"`
	Title       string             `json:"title"`
	Description *string            `json:"description,omitempty"`
	Products    *ProductConnection `json:"products,omitempty"`
	Images      *CategoryImages    `json:"images,omitempty"`
	UpdatedAt   time.Time          `json:"updated_at"`
	CreatedAt   time.Time          `json:"created_at"`
}

func (Category) IsNode()            {}
func (this Category) GetID() string { return this.ID }

type CategoryConnection struct {
	Edges      []CategoryEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"page_info"`
	TotalCount int            `json:"total_count"`
}

type CategoryEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Category `json:"node"`
}

type CategoryImages struct {
	Banner *Image `json:"banner"`
}

type CategoryNotFoundError struct {
	Message string    `json:"message"`
	Code    ErrorCode `json:"code"`
	Path    []string  `json:"path"`
}

func (CategoryNotFoundError) IsUserError()            {}
func (this CategoryNotFoundError) GetMessage() string { return this.Message }
func (this CategoryNotFoundError) GetCode() ErrorCode { return this.Code }
func (this CategoryNotFoundError) GetPath() []string {
	if this.Path == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Path))
	for _, concrete := range this.Path {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type CreateOrderInput struct {
	CustomerID      *string                `json:"customer_id,omitempty"`
	ShippingAddress string                 `json:"shipping_address"`
	ShippingMethod  string                 `json:"shipping_method"`
	PaymentMethod   PaymentMethodType      `json:"payment_method"`
	Discount        *float64               `json:"discount,omitempty"`
	ShippingCost    *float64               `json:"shipping_cost,omitempty"`
	Tax             *float64               `json:"tax,omitempty"`
	Items           []CreateOrderItemInput `json:"items"`
	FullName        *string                `json:"full_name,omitempty"`
	Email           *string                `json:"email,omitempty"`
	PhoneNumber     *string                `json:"phone_number,omitempty"`
}

type CreateOrderItemInput struct {
	ProductVariationID string  `json:"product_variation_id"`
	Quantity           int     `json:"quantity"`
	Price              float64 `json:"price"`
}

type CreateOrderPayload struct {
	Order  *Order      `json:"order,omitempty"`
	Errors []UserError `json:"errors"`
}

type Image struct {
	URL     string  `json:"url"`
	AltText *string `json:"alt_text,omitempty"`
}

type ImageInput struct {
	URL     string  `json:"url"`
	AltText *string `json:"alt_text,omitempty"`
}

type Mutation struct {
}

type Order struct {
	ID              string             `json:"id"`
	OrderID         int                `json:"order_id"`
	Status          OrderStatusType    `json:"status"`
	CreatedAt       time.Time          `json:"created_at"`
	UpdatedAt       time.Time          `json:"updated_at"`
	CustomerID      *string            `json:"customer_id,omitempty"`
	Amount          float64            `json:"amount"`
	Discount        float64            `json:"discount"`
	ShippingCost    float64            `json:"shipping_cost"`
	Tax             float64            `json:"tax"`
	ShippingAddress string             `json:"shipping_address"`
	PaymentMethod   PaymentMethodType  `json:"payment_method"`
	PaymentStatus   PaymentStatusType  `json:"payment_status"`
	ShippingMethod  string             `json:"shipping_method"`
	ShippingStatus  ShippingStatusType `json:"shipping_status"`
	TransactionID   *string            `json:"transaction_id,omitempty"`
	Username        string             `json:"username"`
	ShopID          string             `json:"shop_id"`
	Items           []OrderItem        `json:"items"`
	CustomerName    string             `json:"customer_name"`
	CustomerEmail   *string            `json:"customer_email,omitempty"`
	CustomerPhone   *string            `json:"customer_phone,omitempty"`
}

func (Order) IsNode()            {}
func (this Order) GetID() string { return this.ID }

type OrderConnection struct {
	Edges      []OrderEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"page_info"`
	TotalCount int         `json:"total_count"`
}

type OrderEdge struct {
	Cursor string `json:"cursor"`
	Node   *Order `json:"node"`
}

type OrderItem struct {
	ID                 string  `json:"id"`
	OrderItemID        int     `json:"order_item_id"`
	Quantity           int     `json:"quantity"`
	Price              float64 `json:"price"`
	ProductVariationID string  `json:"product_variation_id"`
}

func (OrderItem) IsNode()            {}
func (this OrderItem) GetID() string { return this.ID }

type PageInfo struct {
	StartCursor     string `json:"start_cursor"`
	EndCursor       string `json:"end_cursor"`
	HasNextPage     bool   `json:"has_next_page"`
	HasPreviousPage bool   `json:"has_previous_page"`
}

type PaymentMethodConfig struct {
	PublishableKey       *string `json:"publishable_key,omitempty"`
	TestMode             *bool   `json:"test_mode,omitempty"`
	ClientID             *string `json:"client_id,omitempty"`
	SandboxMode          *bool   `json:"sandbox_mode,omitempty"`
	PublicKey            *string `json:"public_key,omitempty"`
	TestModePaystack     *bool   `json:"test_mode_paystack,omitempty"`
	PublicKeyFlutterwave *string `json:"public_key_flutterwave,omitempty"`
	TestModeFlutterwave  *bool   `json:"test_mode_flutterwave,omitempty"`
}

type PaymentMethodInfo struct {
	ID       string               `json:"id"`
	Name     string               `json:"name"`
	Provider string               `json:"provider"`
	Enabled  bool                 `json:"enabled"`
	Config   *PaymentMethodConfig `json:"config"`
}

type Product struct {
	ID             string             `json:"id"`
	ProductID      int                `json:"product_id"`
	Slug           string             `json:"slug"`
	Title          string             `json:"title"`
	Description    string             `json:"description"`
	Attributes     []ProductAttribute `json:"attributes"`
	DefaultVariant *ProductVariant    `json:"default_variant"`
	Variants       []ProductVariant   `json:"variants"`
	Images         []Image            `json:"images"`
	UpdatedAt      time.Time          `json:"updated_at"`
	CreatedAt      time.Time          `json:"created_at"`
}

func (Product) IsNode()            {}
func (this Product) GetID() string { return this.ID }

type ProductAttribute struct {
	Title string `json:"title"`
	Value string `json:"value"`
}

type ProductConnection struct {
	Edges      []ProductEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"page_info"`
	TotalCount int           `json:"total_count"`
}

type ProductEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Product `json:"node"`
}

type ProductNotFoundError struct {
	Message string    `json:"message"`
	Code    ErrorCode `json:"code"`
	Path    []string  `json:"path"`
}

func (ProductNotFoundError) IsUserError()            {}
func (this ProductNotFoundError) GetMessage() string { return this.Message }
func (this ProductNotFoundError) GetCode() ErrorCode { return this.Code }
func (this ProductNotFoundError) GetPath() []string {
	if this.Path == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Path))
	for _, concrete := range this.Path {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type ProductVariant struct {
	ID                string             `json:"id"`
	VariationID       int                `json:"variation_id"`
	Price             float64            `json:"price"`
	AvailableQuantity int                `json:"available_quantity"`
	Description       string             `json:"description"`
	IsDefault         bool               `json:"is_default"`
	Attributes        []ProductAttribute `json:"attributes"`
	StockStatus       ProductStockStatus `json:"stock_status"`
}

func (ProductVariant) IsNode()            {}
func (this ProductVariant) GetID() string { return this.ID }

type Query struct {
}

type Shop struct {
	ID                   string              `json:"id"`
	Title                string              `json:"title"`
	DefaultDomain        string              `json:"default_domain"`
	ContactPhone         *string             `json:"contact_phone,omitempty"`
	ContactEmail         *string             `json:"contact_email,omitempty"`
	Address              *ShopAddress        `json:"address"`
	Products             *ProductConnection  `json:"products,omitempty"`
	Categories           *CategoryConnection `json:"categories,omitempty"`
	WhatsAppNumber       *string             `json:"whats_app_number,omitempty"`
	WhatsAppLink         *string             `json:"whats_app_link,omitempty"`
	FacebookLink         *string             `json:"facebook_link,omitempty"`
	InstagramLink        *string             `json:"instagram_link,omitempty"`
	Images               *ShopImages         `json:"images"`
	CurrencyCode         string              `json:"currency_code"`
	About                *string             `json:"about,omitempty"`
	ShopProductsCategory *string             `json:"shop_products_category,omitempty"`
	SeoDescription       *string             `json:"seo_description,omitempty"`
	SeoKeywords          []string            `json:"seo_keywords"`
	SeoTitle             *string             `json:"seo_title,omitempty"`
	PaymentMethods       []PaymentMethodInfo `json:"payment_methods"`
}

func (Shop) IsNode()            {}
func (this Shop) GetID() string { return this.ID }

type ShopAddress struct {
	Address string `json:"address"`
}

type ShopAddressInput struct {
	Address string `json:"address"`
}

type ShopImages struct {
	SiteLogo       *Image `json:"site_logo,omitempty"`
	SiteLogoDark   *Image `json:"site_logo_dark,omitempty"`
	Favicon        *Image `json:"favicon,omitempty"`
	Banner         *Image `json:"banner,omitempty"`
	BannerDark     *Image `json:"banner_dark,omitempty"`
	CoverImage     *Image `json:"cover_image,omitempty"`
	CoverImageDark *Image `json:"cover_image_dark,omitempty"`
}

type UpdateOrderStatusInput struct {
	OrderID string          `json:"order_id"`
	Status  OrderStatusType `json:"status"`
}

type UpdateOrderStatusPayload struct {
	Order  *Order      `json:"order,omitempty"`
	Errors []UserError `json:"errors"`
}

type ErrorCode string

const (
	ErrorCodeNotFoundShop           ErrorCode = "NOT_FOUND_SHOP"
	ErrorCodeNotFoundCategory       ErrorCode = "NOT_FOUND_CATEGORY"
	ErrorCodeAuthInvalidToken       ErrorCode = "AUTH_INVALID_TOKEN"
	ErrorCodeValidationInvalidInput ErrorCode = "VALIDATION_INVALID_INPUT"
	ErrorCodeServerErrorInternal    ErrorCode = "SERVER_ERROR_INTERNAL"
	ErrorCodeRateLimitExceeded      ErrorCode = "RATE_LIMIT_EXCEEDED"
)

var AllErrorCode = []ErrorCode{
	ErrorCodeNotFoundShop,
	ErrorCodeNotFoundCategory,
	ErrorCodeAuthInvalidToken,
	ErrorCodeValidationInvalidInput,
	ErrorCodeServerErrorInternal,
	ErrorCodeRateLimitExceeded,
}

func (e ErrorCode) IsValid() bool {
	switch e {
	case ErrorCodeNotFoundShop, ErrorCodeNotFoundCategory, ErrorCodeAuthInvalidToken, ErrorCodeValidationInvalidInput, ErrorCodeServerErrorInternal, ErrorCodeRateLimitExceeded:
		return true
	}
	return false
}

func (e ErrorCode) String() string {
	return string(e)
}

func (e *ErrorCode) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorCode", str)
	}
	return nil
}

func (e ErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ErrorCode) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ErrorCode) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type OrderStatusType string

const (
	OrderStatusTypePending    OrderStatusType = "PENDING"
	OrderStatusTypeProcessing OrderStatusType = "PROCESSING"
	OrderStatusTypeCompleted  OrderStatusType = "COMPLETED"
	OrderStatusTypeCancelled  OrderStatusType = "CANCELLED"
	OrderStatusTypeRefunded   OrderStatusType = "REFUNDED"
)

var AllOrderStatusType = []OrderStatusType{
	OrderStatusTypePending,
	OrderStatusTypeProcessing,
	OrderStatusTypeCompleted,
	OrderStatusTypeCancelled,
	OrderStatusTypeRefunded,
}

func (e OrderStatusType) IsValid() bool {
	switch e {
	case OrderStatusTypePending, OrderStatusTypeProcessing, OrderStatusTypeCompleted, OrderStatusTypeCancelled, OrderStatusTypeRefunded:
		return true
	}
	return false
}

func (e OrderStatusType) String() string {
	return string(e)
}

func (e *OrderStatusType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatusType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatusType", str)
	}
	return nil
}

func (e OrderStatusType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderStatusType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderStatusType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PaymentMethodType string

const (
	PaymentMethodTypeFlutterwave PaymentMethodType = "FLUTTERWAVE"
	PaymentMethodTypePaystack    PaymentMethodType = "PAYSTACK"
	PaymentMethodTypePaypal      PaymentMethodType = "PAYPAL"
	PaymentMethodTypeStripe      PaymentMethodType = "STRIPE"
)

var AllPaymentMethodType = []PaymentMethodType{
	PaymentMethodTypeFlutterwave,
	PaymentMethodTypePaystack,
	PaymentMethodTypePaypal,
	PaymentMethodTypeStripe,
}

func (e PaymentMethodType) IsValid() bool {
	switch e {
	case PaymentMethodTypeFlutterwave, PaymentMethodTypePaystack, PaymentMethodTypePaypal, PaymentMethodTypeStripe:
		return true
	}
	return false
}

func (e PaymentMethodType) String() string {
	return string(e)
}

func (e *PaymentMethodType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMethodType", str)
	}
	return nil
}

func (e PaymentMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PaymentMethodType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PaymentMethodType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PaymentStatusType string

const (
	PaymentStatusTypePending       PaymentStatusType = "PENDING"
	PaymentStatusTypePaid          PaymentStatusType = "PAID"
	PaymentStatusTypeFailed        PaymentStatusType = "FAILED"
	PaymentStatusTypeRefunded      PaymentStatusType = "REFUNDED"
	PaymentStatusTypePartialRefund PaymentStatusType = "PARTIAL_REFUND"
)

var AllPaymentStatusType = []PaymentStatusType{
	PaymentStatusTypePending,
	PaymentStatusTypePaid,
	PaymentStatusTypeFailed,
	PaymentStatusTypeRefunded,
	PaymentStatusTypePartialRefund,
}

func (e PaymentStatusType) IsValid() bool {
	switch e {
	case PaymentStatusTypePending, PaymentStatusTypePaid, PaymentStatusTypeFailed, PaymentStatusTypeRefunded, PaymentStatusTypePartialRefund:
		return true
	}
	return false
}

func (e PaymentStatusType) String() string {
	return string(e)
}

func (e *PaymentStatusType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatusType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatusType", str)
	}
	return nil
}

func (e PaymentStatusType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PaymentStatusType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PaymentStatusType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ProductStockStatus string

const (
	ProductStockStatusInStock    ProductStockStatus = "IN_STOCK"
	ProductStockStatusOutOfStock ProductStockStatus = "OUT_OF_STOCK"
	ProductStockStatusPreorder   ProductStockStatus = "PREORDER"
)

var AllProductStockStatus = []ProductStockStatus{
	ProductStockStatusInStock,
	ProductStockStatusOutOfStock,
	ProductStockStatusPreorder,
}

func (e ProductStockStatus) IsValid() bool {
	switch e {
	case ProductStockStatusInStock, ProductStockStatusOutOfStock, ProductStockStatusPreorder:
		return true
	}
	return false
}

func (e ProductStockStatus) String() string {
	return string(e)
}

func (e *ProductStockStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductStockStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductStockStatus", str)
	}
	return nil
}

func (e ProductStockStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ProductStockStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ProductStockStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ShippingStatusType string

const (
	ShippingStatusTypePending   ShippingStatusType = "PENDING"
	ShippingStatusTypeShipped   ShippingStatusType = "SHIPPED"
	ShippingStatusTypeDelivered ShippingStatusType = "DELIVERED"
	ShippingStatusTypeCancelled ShippingStatusType = "CANCELLED"
	ShippingStatusTypeReturned  ShippingStatusType = "RETURNED"
)

var AllShippingStatusType = []ShippingStatusType{
	ShippingStatusTypePending,
	ShippingStatusTypeShipped,
	ShippingStatusTypeDelivered,
	ShippingStatusTypeCancelled,
	ShippingStatusTypeReturned,
}

func (e ShippingStatusType) IsValid() bool {
	switch e {
	case ShippingStatusTypePending, ShippingStatusTypeShipped, ShippingStatusTypeDelivered, ShippingStatusTypeCancelled, ShippingStatusTypeReturned:
		return true
	}
	return false
}

func (e ShippingStatusType) String() string {
	return string(e)
}

func (e *ShippingStatusType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShippingStatusType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShippingStatusType", str)
	}
	return nil
}

func (e ShippingStatusType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ShippingStatusType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ShippingStatusType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
