// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
	GetID() string
}

type UserError interface {
	IsUserError()
	GetMessage() string
	GetCode() ErrorCode
	GetPath() []string
}

type AddCartItemInput struct {
	ProductID string `json:"product_id"`
	Quantity  int    `json:"quantity"`
}

type Cart struct {
	ID    string     `json:"id"`
	Items []CartItem `json:"items"`
	Total float64    `json:"total"`
}

type CartItem struct {
	ID       string       `json:"id"`
	Product  *CartProduct `json:"product"`
	Quantity int          `json:"quantity"`
}

type CartProduct struct {
	ID    string  `json:"id"`
	Title string  `json:"title"`
	Price float64 `json:"price"`
	Image string  `json:"image"`
}

type Category struct {
	ID          string             `json:"id"`
	Slug        string             `json:"slug"`
	Title       string             `json:"title"`
	Description *string            `json:"description,omitempty"`
	Products    *ProductConnection `json:"products,omitempty"`
	Images      *CategoryImages    `json:"images,omitempty"`
	UpdatedAt   time.Time          `json:"updated_at"`
	CreatedAt   time.Time          `json:"created_at"`
}

func (Category) IsNode()            {}
func (this Category) GetID() string { return this.ID }

type CategoryConnection struct {
	Edges      []CategoryEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"page_info"`
	TotalCount int            `json:"total_count"`
}

type CategoryEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Category `json:"node"`
}

type CategoryImages struct {
	Banner *Image `json:"banner"`
}

type CategoryNotFoundError struct {
	Message string    `json:"message"`
	Code    ErrorCode `json:"code"`
	Path    []string  `json:"path"`
}

func (CategoryNotFoundError) IsUserError()            {}
func (this CategoryNotFoundError) GetMessage() string { return this.Message }
func (this CategoryNotFoundError) GetCode() ErrorCode { return this.Code }
func (this CategoryNotFoundError) GetPath() []string {
	if this.Path == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Path))
	for _, concrete := range this.Path {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type Image struct {
	URL     string  `json:"url"`
	AltText *string `json:"alt_text,omitempty"`
}

type ImageInput struct {
	URL     string  `json:"url"`
	AltText *string `json:"alt_text,omitempty"`
}

type Mutation struct {
}

type PageInfo struct {
	StartCursor     string `json:"start_cursor"`
	EndCursor       string `json:"end_cursor"`
	HasNextPage     bool   `json:"has_next_page"`
	HasPreviousPage bool   `json:"has_previous_page"`
}

type Product struct {
	ID             string             `json:"id"`
	ProductID      int                `json:"product_id"`
	Slug           string             `json:"slug"`
	Title          string             `json:"title"`
	Description    string             `json:"description"`
	Attributes     []ProductAttribute `json:"attributes"`
	DefaultVariant *ProductVariant    `json:"default_variant"`
	Variants       []ProductVariant   `json:"variants"`
	Images         []Image            `json:"images"`
	UpdatedAt      time.Time          `json:"updated_at"`
	CreatedAt      time.Time          `json:"created_at"`
}

func (Product) IsNode()            {}
func (this Product) GetID() string { return this.ID }

type ProductAttribute struct {
	Title string `json:"title"`
	Value string `json:"value"`
}

type ProductConnection struct {
	Edges      []ProductEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"page_info"`
	TotalCount int           `json:"total_count"`
}

type ProductEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Product `json:"node"`
}

type ProductNotFoundError struct {
	Message string    `json:"message"`
	Code    ErrorCode `json:"code"`
	Path    []string  `json:"path"`
}

func (ProductNotFoundError) IsUserError()            {}
func (this ProductNotFoundError) GetMessage() string { return this.Message }
func (this ProductNotFoundError) GetCode() ErrorCode { return this.Code }
func (this ProductNotFoundError) GetPath() []string {
	if this.Path == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Path))
	for _, concrete := range this.Path {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type ProductVariant struct {
	ID                string             `json:"id"`
	VariationID       int                `json:"variation_id"`
	Price             float64            `json:"price"`
	AvailableQuantity int                `json:"available_quantity"`
	Description       string             `json:"description"`
	IsDefault         bool               `json:"is_default"`
	Attributes        []ProductAttribute `json:"attributes"`
	StockStatus       ProductStockStatus `json:"stock_status"`
}

func (ProductVariant) IsNode()            {}
func (this ProductVariant) GetID() string { return this.ID }

type Query struct {
}

type RemoveCartItemInput struct {
	ProductID string `json:"product_id"`
}

type Shop struct {
	ID                   string              `json:"id"`
	Title                string              `json:"title"`
	DefaultDomain        string              `json:"default_domain"`
	ContactPhone         *string             `json:"contact_phone,omitempty"`
	ContactEmail         *string             `json:"contact_email,omitempty"`
	Address              *ShopAddress        `json:"address"`
	Products             *ProductConnection  `json:"products,omitempty"`
	Categories           *CategoryConnection `json:"categories,omitempty"`
	WhatsAppNumber       *string             `json:"whats_app_number,omitempty"`
	WhatsAppLink         *string             `json:"whats_app_link,omitempty"`
	FacebookLink         *string             `json:"facebook_link,omitempty"`
	InstagramLink        *string             `json:"instagram_link,omitempty"`
	Images               *ShopImages         `json:"images"`
	CurrencyCode         string              `json:"currency_code"`
	About                *string             `json:"about,omitempty"`
	ShopProductsCategory *string             `json:"shop_products_category,omitempty"`
	SeoDescription       *string             `json:"seo_description,omitempty"`
	SeoKeywords          []string            `json:"seo_keywords"`
	SeoTitle             *string             `json:"seo_title,omitempty"`
}

func (Shop) IsNode()            {}
func (this Shop) GetID() string { return this.ID }

type ShopAddress struct {
	Address string `json:"address"`
}

type ShopAddressInput struct {
	Address string `json:"address"`
}

type ShopImages struct {
	SiteLogo       *Image `json:"site_logo,omitempty"`
	SiteLogoDark   *Image `json:"site_logo_dark,omitempty"`
	Favicon        *Image `json:"favicon,omitempty"`
	Banner         *Image `json:"banner,omitempty"`
	BannerDark     *Image `json:"banner_dark,omitempty"`
	CoverImage     *Image `json:"cover_image,omitempty"`
	CoverImageDark *Image `json:"cover_image_dark,omitempty"`
}

type UpdateCartItemInput struct {
	ProductID string `json:"product_id"`
	Quantity  int    `json:"quantity"`
}

type ErrorCode string

const (
	ErrorCodeNotFoundShop           ErrorCode = "NOT_FOUND_SHOP"
	ErrorCodeNotFoundCategory       ErrorCode = "NOT_FOUND_CATEGORY"
	ErrorCodeAuthInvalidToken       ErrorCode = "AUTH_INVALID_TOKEN"
	ErrorCodeValidationInvalidInput ErrorCode = "VALIDATION_INVALID_INPUT"
	ErrorCodeServerErrorInternal    ErrorCode = "SERVER_ERROR_INTERNAL"
	ErrorCodeRateLimitExceeded      ErrorCode = "RATE_LIMIT_EXCEEDED"
)

var AllErrorCode = []ErrorCode{
	ErrorCodeNotFoundShop,
	ErrorCodeNotFoundCategory,
	ErrorCodeAuthInvalidToken,
	ErrorCodeValidationInvalidInput,
	ErrorCodeServerErrorInternal,
	ErrorCodeRateLimitExceeded,
}

func (e ErrorCode) IsValid() bool {
	switch e {
	case ErrorCodeNotFoundShop, ErrorCodeNotFoundCategory, ErrorCodeAuthInvalidToken, ErrorCodeValidationInvalidInput, ErrorCodeServerErrorInternal, ErrorCodeRateLimitExceeded:
		return true
	}
	return false
}

func (e ErrorCode) String() string {
	return string(e)
}

func (e *ErrorCode) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorCode", str)
	}
	return nil
}

func (e ErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ErrorCode) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ErrorCode) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ProductStockStatus string

const (
	ProductStockStatusInStock    ProductStockStatus = "IN_STOCK"
	ProductStockStatusOutOfStock ProductStockStatus = "OUT_OF_STOCK"
	ProductStockStatusPreorder   ProductStockStatus = "PREORDER"
)

var AllProductStockStatus = []ProductStockStatus{
	ProductStockStatusInStock,
	ProductStockStatusOutOfStock,
	ProductStockStatusPreorder,
}

func (e ProductStockStatus) IsValid() bool {
	switch e {
	case ProductStockStatusInStock, ProductStockStatusOutOfStock, ProductStockStatusPreorder:
		return true
	}
	return false
}

func (e ProductStockStatus) String() string {
	return string(e)
}

func (e *ProductStockStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductStockStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductStockStatus", str)
	}
	return nil
}

func (e ProductStockStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ProductStockStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ProductStockStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
