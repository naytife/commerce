# ========= CATEGORY ========
extend type Query {
  categories(first: Int = 20, after: ID): CategoryConnection
  category(id: ID!): Category
}

extend type Mutation {
  createCategory(category: CreateCategoryInput!): CreateCategoryPayload
  updateCategory(
    categoryID: ID!
    category: UpdateCategoryInput!
  ): UpdateCategoryPayload
  createCategoryAttribute(
    categoryID: ID!
    attribute: CreateCategoryAttributeInput!
  ): CreateCategoryAttributePayload
  deleteCategoryAttribute(
    categoryID: ID!
    attribute: String!
  ): DeleteCategoryAttributePayload
}

type CategoryConnection {
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}
type CategoryEdge {
  cursor: String!
  node: Category!
}

input CreateCategoryInput {
  parentID: ID
  title: String!
  description: String!
}
input UpdateCategoryInput {
  parentID: ID
  title: String
  description: String
}
union CreateCategoryPayload = CreateCategorySuccess
type CreateCategorySuccess {
  category: Category
}
type CategoryNotFoundError implements UserError {
  message: String!
  code: ErrorCode!
  path: [String!]!
}
union UpdateCategoryPayload = UpdateCategorySuccess | CategoryNotFoundError
type UpdateCategorySuccess {
  category: Category!
}
input CreateCategoryAttributeInput {
  title: String!
  dataType: ProductAttributeDataType!
}
union CreateCategoryAttributePayload =
    CreateCategoryAttributeSuccess
  | CategoryNotFoundError
type CreateCategoryAttributeSuccess {
  attributes: [AllowedCategoryAttributes!]!
}
union DeleteCategoryAttributePayload =
    DeleteCategoryAttributeSuccess
  | CategoryNotFoundError
type DeleteCategoryAttributeSuccess {
  attributes: [AllowedCategoryAttributes!]!
}
type Category implements Node {
  id: ID!
  slug: String!
  title: String!
  description: String!
  children: [Category!]
  products(first: Int = 20, after: ID): ProductConnection
  allowedAttributes: [AllowedCategoryAttributes!]!
  images: CategoryImages
  updatedAt: DateTime!
  createdAt: DateTime!
}
type AllowedCategoryAttributes {
  title: String!
  dataType: ProductAttributeDataType!
}

type CategoryImages {
  banner: Image!
}
