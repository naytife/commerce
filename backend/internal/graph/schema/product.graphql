# ======== PRODUCT ========
extend type Query {
  products: [Product!]!
  product(id: ID!): Product
}

extend type Mutation {
  createProduct(product: CreateProductInput!): CreateProductPayload
  # updateProduct(
  #   productID: ID!
  #   product: UpdateProductInput!
  # ): UpdateProductPayload
  # createProductAttribute(
  #   productID: ID!
  #   attribute: CreateProductAttributeInput!
  # ): CreateProductAttributePayload
  # deleteProductAttribute(
  #   productID: ID!
  #   attribute: String!
  # ): DeleteCategoryAttributePayload
}
enum ProductAttributeDataType {
  STRING
  INTEGER
}
enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
type ProductConnection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
}
type ProductEdge {
  cursor: String!
  node: Product!
}

input CreateProductInput {
  categoryID: ID!
  title: String!
  price: Float!
  description: String!
}

union CreateProductPayload = CreateProductSuccess | CategoryNotFoundError
type CreateProductSuccess {
  product: Product!
}
type Product implements Node {
  id: ID!
  slug: String!
  title: String!
  price: Float!
  description: String!
  category: Category!
  defaultVariant: ProductVariant!
  variants: [ProductVariant!]!
  allowedAttributes: [AllowedProductAttributes!]!
  images: [Image!]!
  status: ProductStatus
  updatedAt: DateTime!
  createdAt: DateTime!
}
type AllowedProductAttributes {
  title: String!
  dataType: ProductAttributeDataType!
}
type ProductAttributeValue {
  intValue: Int
  stringValue: String
}

# ======== ProductVariant ========
enum ProductStockStatus {
  IN_STOCK
  OUT_OF_STOCK
  PREORDER
}
type ProductVariant implements Node {
  id: ID!
  slug: String!
  title: String!
  price: Float!
  availableQuantity: Int!
  description: String!
  attributes: [ProductAttribute!]!
  stockStatus: ProductStockStatus!
  updatedAt: DateTime!
  createdAt: DateTime!
}
type ProductAttribute {
  key: String!
  value: String
}
