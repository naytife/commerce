package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.51

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	"github.com/jackc/pgx/v5/pgtype"
	auth "github.com/petrejonn/naytife/internal"
	"github.com/petrejonn/naytife/internal/db"
	"github.com/petrejonn/naytife/internal/graph/generated"
	"github.com/petrejonn/naytife/internal/graph/model"
)

// CreateShop is the resolver for the createShop field.
func (r *mutationResolver) CreateShop(ctx context.Context, shop model.CreateShopInput) (model.CreateShopPayload, error) {
	claims, ok := ctx.Value("userClaims").(*auth.CustomClaims)
	if !ok {
		return nil, errors.New("Unauthorized")
	}
	owner, err := r.Repository.GetUser(ctx, pgtype.Text{String: claims.Sub, Valid: true})
	if err != nil {
		return nil, errors.New("user not found")
	}
	param := db.CreateShopParams{
		Title:         shop.Title,
		DefaultDomain: shop.Domain,
		OwnerID:       owner.UserID,
		Status:        model.ShopStatusPublished.String(),
		CurrencyCode:  "NGN",
	}
	dbShop, err := r.Repository.CreateShop(ctx, param)
	if err != nil {
		return nil, err
	}
	return &model.CreateShopSuccess{Shop: &model.Shop{
		ID: strconv.FormatInt(
			dbShop.ShopID,
			10,
		),
		CurrencyCode:  dbShop.CurrencyCode,
		Status:        model.ShopStatus(dbShop.Status),
		Title:         dbShop.Title,
		DefaultDomain: dbShop.DefaultDomain,
	}}, nil
}

// UpdateShop is the resolver for the updateShop field.
func (r *mutationResolver) UpdateShop(ctx context.Context, shop model.UpdateShopInput) (model.UpdateShopPayload, error) {
	_, ok := ctx.Value("userClaims").(*auth.CustomClaims)
	if !ok {
		return nil, errors.New("Unauthorized")
	}
	// TODO: Check if user has update permission
	host, ok := ctx.Value("shopHost").(string)
	if !ok {
		return nil, errors.New("host not found")
	}
	params := db.UpdateShopParams{
		DefaultDomain:  host,
		Title:          pgTextFromStringPointer(shop.Title),        // Pass the pointer, no need to dereference here
		CurrencyCode:   pgTextFromStringPointer(shop.CurrencyCode), // Pass the pointer
		About:          pgTextFromStringPointer(shop.About),
		SeoTitle:       pgTextFromStringPointer(shop.SeoTitle),
		SeoDescription: pgTextFromStringPointer(shop.SeoDescription),
		Email:          pgTextFromStringPointer(shop.ContactEmail),
		PhoneNumber:    pgTextFromStringPointer(&shop.ContactPhone.E164),
	}

	dbShop, err := r.Repository.UpdateShop(ctx, params)

	if err != nil {
		return nil, err
	}
	return &model.UpdateShopSuccess{Shop: &model.Shop{
		ID:             strconv.FormatInt(dbShop.ShopID, 10),
		CurrencyCode:   dbShop.CurrencyCode,
		Status:         model.ShopStatus(dbShop.Status),
		Title:          dbShop.Title,
		DefaultDomain:  dbShop.DefaultDomain,
		About:          &dbShop.About.String,
		SeoTitle:       &dbShop.SeoTitle.String,
		SeoDescription: &dbShop.SeoDescription.String,
		ContactEmail:   &dbShop.Email,
		ContactPhone: &model.PhoneNumber{
			E164: dbShop.PhoneNumber.String,
		},
	}}, nil
}

// CreateWhatsApp is the resolver for the createWhatsApp field.
func (r *mutationResolver) CreateWhatsApp(ctx context.Context, input model.CreateWhatsAppInput) (model.CreateWhatsAppPayload, error) {
	panic(fmt.Errorf("not implemented: CreateWhatsApp - createWhatsApp"))
}

// UpdateWhatsApp is the resolver for the updateWhatsApp field.
func (r *mutationResolver) UpdateWhatsApp(ctx context.Context, input model.UpdateWhatsAppInput) (model.UpdateWhatsAppPayload, error) {
	panic(fmt.Errorf("not implemented: UpdateWhatsApp - updateWhatsApp"))
}

// Shop is the resolver for the shop field.
func (r *queryResolver) Shop(ctx context.Context) (*model.Shop, error) {
	host, ok := ctx.Value("shopHost").(string)
	if !ok {
		return nil, errors.New("host not found")
	}
	shop, err := r.Repository.GetShopByDomain(ctx, host)
	if err != nil {
		return nil, err
	}
	return &model.Shop{
		ID:             strconv.FormatInt(shop.ShopID, 10),
		Title:          shop.Title,
		DefaultDomain:  shop.DefaultDomain,
		CurrencyCode:   shop.CurrencyCode,
		Status:         model.ShopStatus(shop.Status),
		About:          &shop.About.String,
		SeoDescription: &shop.SeoDescription.String,
		SeoTitle:       &shop.SeoTitle.String,
		UpdatedAt:      shop.UpdatedAt.Time,
		CreatedAt:      shop.CreatedAt.Time,
	}, nil
}

// MyShops is the resolver for the myShops field.
func (r *queryResolver) MyShops(ctx context.Context) ([]model.Shop, error) {
	claims, ok := ctx.Value("userClaims").(*auth.CustomClaims)
	if !ok {
		return nil, errors.New("Unauthorized")
	}
	owner, err := r.Repository.GetUser(ctx, pgtype.Text{String: claims.Sub, Valid: true})
	if err != nil {
		return nil, err
	}
	shops, err := r.Repository.GetShopsByOwner(ctx, owner.UserID)
	if err != nil {
		return nil, err
	}
	shopList := make([]model.Shop, len(shops))
	for i, shop := range shops {
		shopList[i] = model.Shop{ID: strconv.FormatInt(shop.ShopID, 10), Title: shop.Title, Status: model.ShopStatus(shop.Status), DefaultDomain: shop.DefaultDomain, CurrencyCode: shop.CurrencyCode, About: &shop.About.String}
	}
	return shopList, nil
}

// ID is the resolver for the id field.
func (r *shopResolver) ID(ctx context.Context, obj *model.Shop) (string, error) {
	// Return the base64-encoded ID
	return EncodeRelayID("Category", obj.ID), nil
}

// Shop returns generated.ShopResolver implementation.
func (r *Resolver) Shop() generated.ShopResolver { return &shopResolver{r} }

type shopResolver struct{ *Resolver }
