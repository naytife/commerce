// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: deployment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const completeDataUpdate = `-- name: CompleteDataUpdate :exec
UPDATE shop_data_updates 
SET status = $2, completed_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE update_id = $1
`

type CompleteDataUpdateParams struct {
	UpdateID int64  `json:"update_id"`
	Status   string `json:"status"`
}

func (q *Queries) CompleteDataUpdate(ctx context.Context, arg CompleteDataUpdateParams) error {
	_, err := q.db.Exec(ctx, completeDataUpdate, arg.UpdateID, arg.Status)
	return err
}

const completeDeployment = `-- name: CompleteDeployment :exec
UPDATE shop_deployments 
SET status = $2, message = $3, completed_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE deployment_id = $1
`

type CompleteDeploymentParams struct {
	DeploymentID int64   `json:"deployment_id"`
	Status       string  `json:"status"`
	Message      *string `json:"message"`
}

func (q *Queries) CompleteDeployment(ctx context.Context, arg CompleteDeploymentParams) error {
	_, err := q.db.Exec(ctx, completeDeployment, arg.DeploymentID, arg.Status, arg.Message)
	return err
}

const createDataUpdate = `-- name: CreateDataUpdate :one

INSERT INTO shop_data_updates (
    shop_id,
    data_type,
    status,
    changes_summary,
    started_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING update_id, shop_id, data_type, status, changes_summary, started_at, completed_at, created_at
`

type CreateDataUpdateParams struct {
	ShopID         int64              `json:"shop_id"`
	DataType       string             `json:"data_type"`
	Status         string             `json:"status"`
	ChangesSummary []byte             `json:"changes_summary"`
	StartedAt      pgtype.Timestamptz `json:"started_at"`
}

// Data update tracking queries
func (q *Queries) CreateDataUpdate(ctx context.Context, arg CreateDataUpdateParams) (ShopDataUpdate, error) {
	row := q.db.QueryRow(ctx, createDataUpdate,
		arg.ShopID,
		arg.DataType,
		arg.Status,
		arg.ChangesSummary,
		arg.StartedAt,
	)
	var i ShopDataUpdate
	err := row.Scan(
		&i.UpdateID,
		&i.ShopID,
		&i.DataType,
		&i.Status,
		&i.ChangesSummary,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createDeployment = `-- name: CreateDeployment :one
INSERT INTO shop_deployments (
    shop_id,
    template_name,
    template_version,
    status,
    deployment_type,
    message,
    started_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING deployment_id, shop_id, template_name, template_version, status, deployment_type, message, started_at, completed_at, created_at, updated_at
`

type CreateDeploymentParams struct {
	ShopID          int64              `json:"shop_id"`
	TemplateName    string             `json:"template_name"`
	TemplateVersion string             `json:"template_version"`
	Status          string             `json:"status"`
	DeploymentType  string             `json:"deployment_type"`
	Message         *string            `json:"message"`
	StartedAt       pgtype.Timestamptz `json:"started_at"`
}

func (q *Queries) CreateDeployment(ctx context.Context, arg CreateDeploymentParams) (ShopDeployment, error) {
	row := q.db.QueryRow(ctx, createDeployment,
		arg.ShopID,
		arg.TemplateName,
		arg.TemplateVersion,
		arg.Status,
		arg.DeploymentType,
		arg.Message,
		arg.StartedAt,
	)
	var i ShopDeployment
	err := row.Scan(
		&i.DeploymentID,
		&i.ShopID,
		&i.TemplateName,
		&i.TemplateVersion,
		&i.Status,
		&i.DeploymentType,
		&i.Message,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createDeploymentURL = `-- name: CreateDeploymentURL :one

INSERT INTO shop_deployment_urls (
    deployment_id,
    url_type,
    url
) VALUES (
    $1, $2, $3
) RETURNING url_id, deployment_id, url_type, url, created_at
`

type CreateDeploymentURLParams struct {
	DeploymentID int64  `json:"deployment_id"`
	UrlType      string `json:"url_type"`
	Url          string `json:"url"`
}

// Deployment URL tracking
func (q *Queries) CreateDeploymentURL(ctx context.Context, arg CreateDeploymentURLParams) (ShopDeploymentUrl, error) {
	row := q.db.QueryRow(ctx, createDeploymentURL, arg.DeploymentID, arg.UrlType, arg.Url)
	var i ShopDeploymentUrl
	err := row.Scan(
		&i.UrlID,
		&i.DeploymentID,
		&i.UrlType,
		&i.Url,
		&i.CreatedAt,
	)
	return i, err
}

const getDataUpdateByID = `-- name: GetDataUpdateByID :one
SELECT update_id, shop_id, data_type, status, changes_summary, started_at, completed_at, created_at FROM shop_data_updates 
WHERE update_id = $1
`

func (q *Queries) GetDataUpdateByID(ctx context.Context, updateID int64) (ShopDataUpdate, error) {
	row := q.db.QueryRow(ctx, getDataUpdateByID, updateID)
	var i ShopDataUpdate
	err := row.Scan(
		&i.UpdateID,
		&i.ShopID,
		&i.DataType,
		&i.Status,
		&i.ChangesSummary,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getDeploymentByID = `-- name: GetDeploymentByID :one
SELECT deployment_id, shop_id, template_name, template_version, status, deployment_type, message, started_at, completed_at, created_at, updated_at FROM shop_deployments 
WHERE deployment_id = $1
`

func (q *Queries) GetDeploymentByID(ctx context.Context, deploymentID int64) (ShopDeployment, error) {
	row := q.db.QueryRow(ctx, getDeploymentByID, deploymentID)
	var i ShopDeployment
	err := row.Scan(
		&i.DeploymentID,
		&i.ShopID,
		&i.TemplateName,
		&i.TemplateVersion,
		&i.Status,
		&i.DeploymentType,
		&i.Message,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDeploymentURLs = `-- name: GetDeploymentURLs :many
SELECT url_id, deployment_id, url_type, url, created_at FROM shop_deployment_urls 
WHERE deployment_id = $1
ORDER BY url_type
`

func (q *Queries) GetDeploymentURLs(ctx context.Context, deploymentID int64) ([]ShopDeploymentUrl, error) {
	rows, err := q.db.Query(ctx, getDeploymentURLs, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShopDeploymentUrl
	for rows.Next() {
		var i ShopDeploymentUrl
		if err := rows.Scan(
			&i.UrlID,
			&i.DeploymentID,
			&i.UrlType,
			&i.Url,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeploymentsByShop = `-- name: GetDeploymentsByShop :many
SELECT deployment_id, shop_id, template_name, template_version, status, deployment_type, message, started_at, completed_at, created_at, updated_at FROM shop_deployments 
WHERE shop_id = $1 
ORDER BY started_at DESC 
LIMIT $2 OFFSET $3
`

type GetDeploymentsByShopParams struct {
	ShopID int64 `json:"shop_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetDeploymentsByShop(ctx context.Context, arg GetDeploymentsByShopParams) ([]ShopDeployment, error) {
	rows, err := q.db.Query(ctx, getDeploymentsByShop, arg.ShopID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShopDeployment
	for rows.Next() {
		var i ShopDeployment
		if err := rows.Scan(
			&i.DeploymentID,
			&i.ShopID,
			&i.TemplateName,
			&i.TemplateVersion,
			&i.Status,
			&i.DeploymentType,
			&i.Message,
			&i.StartedAt,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestDataUpdateByShop = `-- name: GetLatestDataUpdateByShop :one
SELECT update_id, shop_id, data_type, status, changes_summary, started_at, completed_at, created_at FROM shop_data_updates 
WHERE shop_id = $1 
ORDER BY started_at DESC 
LIMIT 1
`

func (q *Queries) GetLatestDataUpdateByShop(ctx context.Context, shopID int64) (ShopDataUpdate, error) {
	row := q.db.QueryRow(ctx, getLatestDataUpdateByShop, shopID)
	var i ShopDataUpdate
	err := row.Scan(
		&i.UpdateID,
		&i.ShopID,
		&i.DataType,
		&i.Status,
		&i.ChangesSummary,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getLatestDeploymentByShop = `-- name: GetLatestDeploymentByShop :one
SELECT deployment_id, shop_id, template_name, template_version, status, deployment_type, message, started_at, completed_at, created_at, updated_at FROM shop_deployments 
WHERE shop_id = $1 
ORDER BY started_at DESC 
LIMIT 1
`

func (q *Queries) GetLatestDeploymentByShop(ctx context.Context, shopID int64) (ShopDeployment, error) {
	row := q.db.QueryRow(ctx, getLatestDeploymentByShop, shopID)
	var i ShopDeployment
	err := row.Scan(
		&i.DeploymentID,
		&i.ShopID,
		&i.TemplateName,
		&i.TemplateVersion,
		&i.Status,
		&i.DeploymentType,
		&i.Message,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShopCurrentTemplate = `-- name: GetShopCurrentTemplate :one
SELECT template_name, template_version, status, completed_at
FROM shop_deployments 
WHERE shop_id = $1 AND status = 'deployed'
ORDER BY completed_at DESC 
LIMIT 1
`

type GetShopCurrentTemplateRow struct {
	TemplateName    string             `json:"template_name"`
	TemplateVersion string             `json:"template_version"`
	Status          string             `json:"status"`
	CompletedAt     pgtype.Timestamptz `json:"completed_at"`
}

func (q *Queries) GetShopCurrentTemplate(ctx context.Context, shopID int64) (GetShopCurrentTemplateRow, error) {
	row := q.db.QueryRow(ctx, getShopCurrentTemplate, shopID)
	var i GetShopCurrentTemplateRow
	err := row.Scan(
		&i.TemplateName,
		&i.TemplateVersion,
		&i.Status,
		&i.CompletedAt,
	)
	return i, err
}

const isShopDeployed = `-- name: IsShopDeployed :one
SELECT EXISTS(
    SELECT 1 FROM shop_deployments 
    WHERE shop_id = $1 AND status = 'deployed'
) as is_deployed
`

func (q *Queries) IsShopDeployed(ctx context.Context, shopID int64) (bool, error) {
	row := q.db.QueryRow(ctx, isShopDeployed, shopID)
	var is_deployed bool
	err := row.Scan(&is_deployed)
	return is_deployed, err
}

const updateDataUpdateStatus = `-- name: UpdateDataUpdateStatus :exec
UPDATE shop_data_updates 
SET status = $2, updated_at = CURRENT_TIMESTAMP
WHERE update_id = $1
`

type UpdateDataUpdateStatusParams struct {
	UpdateID int64  `json:"update_id"`
	Status   string `json:"status"`
}

func (q *Queries) UpdateDataUpdateStatus(ctx context.Context, arg UpdateDataUpdateStatusParams) error {
	_, err := q.db.Exec(ctx, updateDataUpdateStatus, arg.UpdateID, arg.Status)
	return err
}

const updateDeploymentStatus = `-- name: UpdateDeploymentStatus :exec
UPDATE shop_deployments 
SET status = $2, message = $3, updated_at = CURRENT_TIMESTAMP
WHERE deployment_id = $1
`

type UpdateDeploymentStatusParams struct {
	DeploymentID int64   `json:"deployment_id"`
	Status       string  `json:"status"`
	Message      *string `json:"message"`
}

func (q *Queries) UpdateDeploymentStatus(ctx context.Context, arg UpdateDeploymentStatusParams) error {
	_, err := q.db.Exec(ctx, updateDeploymentStatus, arg.DeploymentID, arg.Status, arg.Message)
	return err
}

const updateShopLastDataUpdate = `-- name: UpdateShopLastDataUpdate :exec
UPDATE shops 
SET last_data_update_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE shop_id = $1
`

func (q *Queries) UpdateShopLastDataUpdate(ctx context.Context, shopID int64) error {
	_, err := q.db.Exec(ctx, updateShopLastDataUpdate, shopID)
	return err
}

const updateShopLastDeployment = `-- name: UpdateShopLastDeployment :exec
UPDATE shops 
SET last_deployment_id = $2, updated_at = CURRENT_TIMESTAMP
WHERE shop_id = $1
`

type UpdateShopLastDeploymentParams struct {
	ShopID           int64  `json:"shop_id"`
	LastDeploymentID *int64 `json:"last_deployment_id"`
}

func (q *Queries) UpdateShopLastDeployment(ctx context.Context, arg UpdateShopLastDeploymentParams) error {
	_, err := q.db.Exec(ctx, updateShopLastDeployment, arg.ShopID, arg.LastDeploymentID)
	return err
}
