// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product-type.sql

package db

import (
	"context"
)

const createProductType = `-- name: CreateProductType :one
INSERT INTO product_types ( title, shippable, digital, shop_id)
VALUES ($1, $2, $3, $4)
RETURNING product_type_id, title, shippable, digital, shop_id
`

type CreateProductTypeParams struct {
	Title     string `json:"title"`
	Shippable bool   `json:"shippable"`
	Digital   bool   `json:"digital"`
	ShopID    int64  `json:"shop_id"`
}

func (q *Queries) CreateProductType(ctx context.Context, arg CreateProductTypeParams) (ProductType, error) {
	row := q.db.QueryRow(ctx, createProductType,
		arg.Title,
		arg.Shippable,
		arg.Digital,
		arg.ShopID,
	)
	var i ProductType
	err := row.Scan(
		&i.ProductTypeID,
		&i.Title,
		&i.Shippable,
		&i.Digital,
		&i.ShopID,
	)
	return i, err
}

const deleteProductType = `-- name: DeleteProductType :one
DELETE FROM product_types
WHERE product_type_id = $1 AND shop_id = $2
RETURNING product_type_id, title, shippable, digital, shop_id
`

type DeleteProductTypeParams struct {
	ProductTypeID int64 `json:"product_type_id"`
	ShopID        int64 `json:"shop_id"`
}

func (q *Queries) DeleteProductType(ctx context.Context, arg DeleteProductTypeParams) (ProductType, error) {
	row := q.db.QueryRow(ctx, deleteProductType, arg.ProductTypeID, arg.ShopID)
	var i ProductType
	err := row.Scan(
		&i.ProductTypeID,
		&i.Title,
		&i.Shippable,
		&i.Digital,
		&i.ShopID,
	)
	return i, err
}

const getProductType = `-- name: GetProductType :one
SELECT product_type_id, title, shippable, digital, shop_id FROM product_types WHERE product_type_id = $1 AND shop_id = $2
`

type GetProductTypeParams struct {
	ProductTypeID int64 `json:"product_type_id"`
	ShopID        int64 `json:"shop_id"`
}

func (q *Queries) GetProductType(ctx context.Context, arg GetProductTypeParams) (ProductType, error) {
	row := q.db.QueryRow(ctx, getProductType, arg.ProductTypeID, arg.ShopID)
	var i ProductType
	err := row.Scan(
		&i.ProductTypeID,
		&i.Title,
		&i.Shippable,
		&i.Digital,
		&i.ShopID,
	)
	return i, err
}

const getProductTypes = `-- name: GetProductTypes :many
SELECT product_type_id, title, shippable, digital, shop_id FROM product_types WHERE shop_id = $1
`

func (q *Queries) GetProductTypes(ctx context.Context, shopID int64) ([]ProductType, error) {
	rows, err := q.db.Query(ctx, getProductTypes, shopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductType
	for rows.Next() {
		var i ProductType
		if err := rows.Scan(
			&i.ProductTypeID,
			&i.Title,
			&i.Shippable,
			&i.Digital,
			&i.ShopID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductType = `-- name: UpdateProductType :one
UPDATE product_types
SET title = $1, shippable = $2, digital = $3
WHERE product_type_id = $4 AND shop_id = $5
RETURNING product_type_id, title, shippable, digital, shop_id
`

type UpdateProductTypeParams struct {
	Title         string `json:"title"`
	Shippable     bool   `json:"shippable"`
	Digital       bool   `json:"digital"`
	ProductTypeID int64  `json:"product_type_id"`
	ShopID        int64  `json:"shop_id"`
}

func (q *Queries) UpdateProductType(ctx context.Context, arg UpdateProductTypeParams) (ProductType, error) {
	row := q.db.QueryRow(ctx, updateProductType,
		arg.Title,
		arg.Shippable,
		arg.Digital,
		arg.ProductTypeID,
		arg.ShopID,
	)
	var i ProductType
	err := row.Scan(
		&i.ProductTypeID,
		&i.Title,
		&i.Shippable,
		&i.Digital,
		&i.ShopID,
	)
	return i, err
}
