// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_image.sql

package db

import (
	"context"
)

const createProductImage = `-- name: CreateProductImage :one
INSERT INTO product_images (url, alt, product_id, shop_id) 
VALUES ($1, $2, $3, $4)
RETURNING product_image_id, url, alt, product_id, shop_id
`

type CreateProductImageParams struct {
	Url       string `json:"url"`
	Alt       string `json:"alt"`
	ProductID int64  `json:"product_id"`
	ShopID    int64  `json:"shop_id"`
}

func (q *Queries) CreateProductImage(ctx context.Context, arg CreateProductImageParams) (ProductImage, error) {
	row := q.db.QueryRow(ctx, createProductImage,
		arg.Url,
		arg.Alt,
		arg.ProductID,
		arg.ShopID,
	)
	var i ProductImage
	err := row.Scan(
		&i.ProductImageID,
		&i.Url,
		&i.Alt,
		&i.ProductID,
		&i.ShopID,
	)
	return i, err
}

const deleteAllProductImages = `-- name: DeleteAllProductImages :exec
DELETE FROM product_images
WHERE product_id = $1 AND shop_id = $2
`

type DeleteAllProductImagesParams struct {
	ProductID int64 `json:"product_id"`
	ShopID    int64 `json:"shop_id"`
}

func (q *Queries) DeleteAllProductImages(ctx context.Context, arg DeleteAllProductImagesParams) error {
	_, err := q.db.Exec(ctx, deleteAllProductImages, arg.ProductID, arg.ShopID)
	return err
}

const deleteProductImage = `-- name: DeleteProductImage :exec
DELETE FROM product_images
WHERE product_image_id = $1 AND shop_id = $2
`

type DeleteProductImageParams struct {
	ProductImageID int64 `json:"product_image_id"`
	ShopID         int64 `json:"shop_id"`
}

func (q *Queries) DeleteProductImage(ctx context.Context, arg DeleteProductImageParams) error {
	_, err := q.db.Exec(ctx, deleteProductImage, arg.ProductImageID, arg.ShopID)
	return err
}

const getProductImages = `-- name: GetProductImages :many
SELECT product_image_id, url, alt, product_id, shop_id
FROM product_images
WHERE product_id = $1 AND shop_id = $2
ORDER BY product_image_id
`

type GetProductImagesParams struct {
	ProductID int64 `json:"product_id"`
	ShopID    int64 `json:"shop_id"`
}

func (q *Queries) GetProductImages(ctx context.Context, arg GetProductImagesParams) ([]ProductImage, error) {
	rows, err := q.db.Query(ctx, getProductImages, arg.ProductID, arg.ShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductImage
	for rows.Next() {
		var i ProductImage
		if err := rows.Scan(
			&i.ProductImageID,
			&i.Url,
			&i.Alt,
			&i.ProductID,
			&i.ShopID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
