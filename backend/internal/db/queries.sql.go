// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getUser = `-- name: GetUser :one
SELECT user_id, sub, email, provider, provider_id, name, locale, profile_picture, created_at, last_login, verified_email FROM users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email *string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Sub,
		&i.Email,
		&i.Provider,
		&i.ProviderID,
		&i.Name,
		&i.Locale,
		&i.ProfilePicture,
		&i.CreatedAt,
		&i.LastLogin,
		&i.VerifiedEmail,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, sub, email, provider, provider_id, name, locale, profile_picture, created_at, last_login, verified_email FROM users
WHERE user_id = $1
`

func (q *Queries) GetUserById(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Sub,
		&i.Email,
		&i.Provider,
		&i.ProviderID,
		&i.Name,
		&i.Locale,
		&i.ProfilePicture,
		&i.CreatedAt,
		&i.LastLogin,
		&i.VerifiedEmail,
	)
	return i, err
}

const getUserBySub = `-- name: GetUserBySub :one
SELECT user_id, sub, email, provider, provider_id, name, locale, profile_picture, created_at, last_login, verified_email FROM users
WHERE sub = $1
`

func (q *Queries) GetUserBySub(ctx context.Context, sub *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserBySub, sub)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Sub,
		&i.Email,
		&i.Provider,
		&i.ProviderID,
		&i.Name,
		&i.Locale,
		&i.ProfilePicture,
		&i.CreatedAt,
		&i.LastLogin,
		&i.VerifiedEmail,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (sub, provider_id, provider, email, name, locale, profile_picture, verified_email)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT (email)
DO UPDATE SET
    name = COALESCE(EXCLUDED.name, users.name),
    profile_picture = COALESCE(EXCLUDED.profile_picture, users.profile_picture),
    locale = COALESCE(EXCLUDED.locale, users.locale),
    verified_email = COALESCE(EXCLUDED.verified_email, users.verified_email),
    last_login = NOW()
RETURNING user_id, sub, email, provider, provider_id, name, locale, profile_picture, created_at, last_login, verified_email
`

type UpsertUserParams struct {
	Sub            *string `json:"sub"`
	ProviderID     *string `json:"provider_id"`
	Provider       *string `json:"provider"`
	Email          *string `json:"email"`
	Name           *string `json:"name"`
	Locale         *string `json:"locale"`
	ProfilePicture *string `json:"profile_picture"`
	VerifiedEmail  *bool   `json:"verified_email"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, upsertUser,
		arg.Sub,
		arg.ProviderID,
		arg.Provider,
		arg.Email,
		arg.Name,
		arg.Locale,
		arg.ProfilePicture,
		arg.VerifiedEmail,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Sub,
		&i.Email,
		&i.Provider,
		&i.ProviderID,
		&i.Name,
		&i.Locale,
		&i.ProfilePicture,
		&i.CreatedAt,
		&i.LastLogin,
		&i.VerifiedEmail,
	)
	return i, err
}
