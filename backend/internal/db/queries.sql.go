// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getUser = `-- name: GetUser :one
SELECT user_id, provider, email, name, profile_picture, created_at, last_login, provider_id, locale FROM users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Provider,
		&i.Email,
		&i.Name,
		&i.ProfilePicture,
		&i.CreatedAt,
		&i.LastLogin,
		&i.ProviderID,
		&i.Locale,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users ( email, name, profile_picture)
VALUES ($1, $2, $3)
ON CONFLICT (email)
DO UPDATE SET name = EXCLUDED.name, profile_picture = EXCLUDED.profile_picture
RETURNING user_id, email, name, profile_picture
`

type UpsertUserParams struct {
	Email          string  `json:"email"`
	Name           *string `json:"name"`
	ProfilePicture *string `json:"profile_picture"`
}

type UpsertUserRow struct {
	UserID         uuid.UUID `json:"user_id"`
	Email          string    `json:"email"`
	Name           *string   `json:"name"`
	ProfilePicture *string   `json:"profile_picture"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (UpsertUserRow, error) {
	row := q.db.QueryRow(ctx, upsertUser, arg.Email, arg.Name, arg.ProfilePicture)
	var i UpsertUserRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.ProfilePicture,
	)
	return i, err
}
