// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getUser = `-- name: GetUser :one
SELECT user_id, auth0_sub, email, name, profile_picture_url, created_at, last_login FROM users
WHERE auth0_sub = $1
`

func (q *Queries) GetUser(ctx context.Context, auth0Sub pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUser, auth0Sub)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Auth0Sub,
		&i.Email,
		&i.Name,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (auth0_sub, email, name, profile_picture_url)
VALUES ($1, $2, $3, $4)
ON CONFLICT (auth0_sub)
DO UPDATE SET email = EXCLUDED.email, name = EXCLUDED.name, profile_picture_url = EXCLUDED.profile_picture_url
RETURNING user_id, auth0_sub, email, name, profile_picture_url
`

type UpsertUserParams struct {
	Auth0Sub          pgtype.Text
	Email             string
	Name              pgtype.Text
	ProfilePictureUrl pgtype.Text
}

type UpsertUserRow struct {
	UserID            uuid.UUID
	Auth0Sub          pgtype.Text
	Email             string
	Name              pgtype.Text
	ProfilePictureUrl pgtype.Text
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (UpsertUserRow, error) {
	row := q.db.QueryRow(ctx, upsertUser,
		arg.Auth0Sub,
		arg.Email,
		arg.Name,
		arg.ProfilePictureUrl,
	)
	var i UpsertUserRow
	err := row.Scan(
		&i.UserID,
		&i.Auth0Sub,
		&i.Email,
		&i.Name,
		&i.ProfilePictureUrl,
	)
	return i, err
}
