// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const deleteProductVariations = `-- name: DeleteProductVariations :batchexec
DELETE FROM product_variations
WHERE shop_id = $1 AND product_id = $2
AND product_variation_id != ALL($3::bigint[])
`

type DeleteProductVariationsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type DeleteProductVariationsParams struct {
	ShopID              int64   `json:"shop_id"`
	ProductID           int64   `json:"product_id"`
	ProductVariationIds []int64 `json:"product_variation_ids"`
}

func (q *Queries) DeleteProductVariations(ctx context.Context, arg []DeleteProductVariationsParams) *DeleteProductVariationsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ShopID,
			a.ProductID,
			a.ProductVariationIds,
		}
		batch.Queue(deleteProductVariations, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &DeleteProductVariationsBatchResults{br, len(arg), false}
}

func (b *DeleteProductVariationsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *DeleteProductVariationsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
