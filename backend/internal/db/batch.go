// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const batchDeleteAttributeOptions = `-- name: BatchDeleteAttributeOptions :batchexec
DELETE FROM attribute_options
WHERE shop_id = $1
AND attribute_id = $2
AND attribute_option_id != ALL($3::bigint[])
`

type BatchDeleteAttributeOptionsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchDeleteAttributeOptionsParams struct {
	ShopID             int64   `json:"shop_id"`
	AttributeID        int64   `json:"attribute_id"`
	AttributeOptionIds []int64 `json:"attribute_option_ids"`
}

func (q *Queries) BatchDeleteAttributeOptions(ctx context.Context, arg []BatchDeleteAttributeOptionsParams) *BatchDeleteAttributeOptionsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ShopID,
			a.AttributeID,
			a.AttributeOptionIds,
		}
		batch.Queue(batchDeleteAttributeOptions, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchDeleteAttributeOptionsBatchResults{br, len(arg), false}
}

func (b *BatchDeleteAttributeOptionsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchDeleteAttributeOptionsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const batchDeleteProductAttributeValues = `-- name: BatchDeleteProductAttributeValues :batchexec
DELETE FROM product_attribute_values 
WHERE product_id = $1 
AND shop_id = $2
AND attribute_id NOT IN (SELECT UNNEST($3::int[]))
`

type BatchDeleteProductAttributeValuesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchDeleteProductAttributeValuesParams struct {
	ProductID int64   `json:"product_id"`
	ShopID    int64   `json:"shop_id"`
	Column3   []int32 `json:"column_3"`
}

func (q *Queries) BatchDeleteProductAttributeValues(ctx context.Context, arg []BatchDeleteProductAttributeValuesParams) *BatchDeleteProductAttributeValuesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ProductID,
			a.ShopID,
			a.Column3,
		}
		batch.Queue(batchDeleteProductAttributeValues, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchDeleteProductAttributeValuesBatchResults{br, len(arg), false}
}

func (b *BatchDeleteProductAttributeValuesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchDeleteProductAttributeValuesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const batchDeleteProductVariationAttributeValues = `-- name: BatchDeleteProductVariationAttributeValues :batchexec
DELETE FROM product_variation_attribute_values 
WHERE product_variation_id = $1 
AND shop_id = $2
AND attribute_id NOT IN (SELECT UNNEST($3::int[]))
`

type BatchDeleteProductVariationAttributeValuesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchDeleteProductVariationAttributeValuesParams struct {
	ProductVariationID int64   `json:"product_variation_id"`
	ShopID             int64   `json:"shop_id"`
	Column3            []int32 `json:"column_3"`
}

func (q *Queries) BatchDeleteProductVariationAttributeValues(ctx context.Context, arg []BatchDeleteProductVariationAttributeValuesParams) *BatchDeleteProductVariationAttributeValuesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ProductVariationID,
			a.ShopID,
			a.Column3,
		}
		batch.Queue(batchDeleteProductVariationAttributeValues, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchDeleteProductVariationAttributeValuesBatchResults{br, len(arg), false}
}

func (b *BatchDeleteProductVariationAttributeValuesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchDeleteProductVariationAttributeValuesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const batchUpsertAttributeOption = `-- name: BatchUpsertAttributeOption :batchmany
INSERT INTO attribute_options (value, shop_id, attribute_id)
VALUES ($1, $2, $3)
ON CONFLICT (value, shop_id, attribute_id)
DO UPDATE SET 
    value = EXCLUDED.value
WHERE attribute_options.value IS DISTINCT FROM EXCLUDED.value
RETURNING attribute_option_id, value, shop_id, attribute_id
`

type BatchUpsertAttributeOptionBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchUpsertAttributeOptionParams struct {
	Value       string `json:"value"`
	ShopID      int64  `json:"shop_id"`
	AttributeID int64  `json:"attribute_id"`
}

func (q *Queries) BatchUpsertAttributeOption(ctx context.Context, arg []BatchUpsertAttributeOptionParams) *BatchUpsertAttributeOptionBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Value,
			a.ShopID,
			a.AttributeID,
		}
		batch.Queue(batchUpsertAttributeOption, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchUpsertAttributeOptionBatchResults{br, len(arg), false}
}

func (b *BatchUpsertAttributeOptionBatchResults) Query(f func(int, []AttributeOption, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []AttributeOption
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i AttributeOption
				if err := rows.Scan(
					&i.AttributeOptionID,
					&i.Value,
					&i.ShopID,
					&i.AttributeID,
				); err != nil {
					return err
				}
				items = append(items, i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *BatchUpsertAttributeOptionBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const batchUpsertProductAttributeValues = `-- name: BatchUpsertProductAttributeValues :batchexec
INSERT INTO product_attribute_values (value, attribute_option_id, product_id, attribute_id, shop_id)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (product_id, attribute_id, shop_id) 
DO UPDATE SET 
    value = EXCLUDED.value,
    attribute_option_id = EXCLUDED.attribute_option_id
WHERE product_attribute_values.value IS DISTINCT FROM EXCLUDED.value  
   OR product_attribute_values.attribute_option_id IS DISTINCT FROM EXCLUDED.attribute_option_id
RETURNING product_attribute_value_id, value, attribute_option_id, product_id, attribute_id, shop_id
`

type BatchUpsertProductAttributeValuesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchUpsertProductAttributeValuesParams struct {
	Value             *string `json:"value"`
	AttributeOptionID *int64  `json:"attribute_option_id"`
	ProductID         int64   `json:"product_id"`
	AttributeID       int64   `json:"attribute_id"`
	ShopID            int64   `json:"shop_id"`
}

func (q *Queries) BatchUpsertProductAttributeValues(ctx context.Context, arg []BatchUpsertProductAttributeValuesParams) *BatchUpsertProductAttributeValuesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Value,
			a.AttributeOptionID,
			a.ProductID,
			a.AttributeID,
			a.ShopID,
		}
		batch.Queue(batchUpsertProductAttributeValues, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchUpsertProductAttributeValuesBatchResults{br, len(arg), false}
}

func (b *BatchUpsertProductAttributeValuesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchUpsertProductAttributeValuesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const batchUpsertProductVariationAttributeValues = `-- name: BatchUpsertProductVariationAttributeValues :batchexec
INSERT INTO product_variation_attribute_values (value, attribute_option_id, product_variation_id, attribute_id, shop_id)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (product_variation_id, attribute_id, shop_id) 
DO UPDATE SET 
    value = EXCLUDED.value,
    attribute_option_id = EXCLUDED.attribute_option_id
WHERE product_variation_attribute_values.value IS DISTINCT FROM EXCLUDED.value  
   OR product_variation_attribute_values.attribute_option_id IS DISTINCT FROM EXCLUDED.attribute_option_id
RETURNING product_variation_attribute_value_id, value, attribute_option_id, product_variation_id, attribute_id, shop_id
`

type BatchUpsertProductVariationAttributeValuesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchUpsertProductVariationAttributeValuesParams struct {
	Value              *string `json:"value"`
	AttributeOptionID  *int64  `json:"attribute_option_id"`
	ProductVariationID int64   `json:"product_variation_id"`
	AttributeID        int64   `json:"attribute_id"`
	ShopID             int64   `json:"shop_id"`
}

func (q *Queries) BatchUpsertProductVariationAttributeValues(ctx context.Context, arg []BatchUpsertProductVariationAttributeValuesParams) *BatchUpsertProductVariationAttributeValuesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Value,
			a.AttributeOptionID,
			a.ProductVariationID,
			a.AttributeID,
			a.ShopID,
		}
		batch.Queue(batchUpsertProductVariationAttributeValues, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchUpsertProductVariationAttributeValuesBatchResults{br, len(arg), false}
}

func (b *BatchUpsertProductVariationAttributeValuesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchUpsertProductVariationAttributeValuesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const upsertProductVariants = `-- name: UpsertProductVariants :batchmany
INSERT INTO product_variations (
    description, price, sku, available_quantity,
    seo_description, seo_keywords, seo_title,
    product_id, shop_id, is_default
)
VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, $8,
    $9, $10
)
ON CONFLICT (sku, shop_id)
DO UPDATE SET
    description = EXCLUDED.description,
    price = EXCLUDED.price,
    available_quantity = EXCLUDED.available_quantity,
    seo_description = EXCLUDED.seo_description,
    seo_keywords = EXCLUDED.seo_keywords,
    seo_title = EXCLUDED.seo_title
RETURNING product_variation_id, sku, description, price, available_quantity, seo_description, seo_keywords, seo_title, is_default, created_at, updated_at, product_id, shop_id
`

type UpsertProductVariantsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertProductVariantsParams struct {
	Description       string         `json:"description"`
	Price             pgtype.Numeric `json:"price"`
	Sku               string         `json:"sku"`
	AvailableQuantity int64          `json:"available_quantity"`
	SeoDescription    *string        `json:"seo_description"`
	SeoKeywords       []string       `json:"seo_keywords"`
	SeoTitle          *string        `json:"seo_title"`
	ProductID         int64          `json:"product_id"`
	ShopID            int64          `json:"shop_id"`
	IsDefault         bool           `json:"is_default"`
}

func (q *Queries) UpsertProductVariants(ctx context.Context, arg []UpsertProductVariantsParams) *UpsertProductVariantsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Description,
			a.Price,
			a.Sku,
			a.AvailableQuantity,
			a.SeoDescription,
			a.SeoKeywords,
			a.SeoTitle,
			a.ProductID,
			a.ShopID,
			a.IsDefault,
		}
		batch.Queue(upsertProductVariants, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertProductVariantsBatchResults{br, len(arg), false}
}

func (b *UpsertProductVariantsBatchResults) Query(f func(int, []ProductVariation, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []ProductVariation
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i ProductVariation
				if err := rows.Scan(
					&i.ProductVariationID,
					&i.Sku,
					&i.Description,
					&i.Price,
					&i.AvailableQuantity,
					&i.SeoDescription,
					&i.SeoKeywords,
					&i.SeoTitle,
					&i.IsDefault,
					&i.CreatedAt,
					&i.UpdatedAt,
					&i.ProductID,
					&i.ShopID,
				); err != nil {
					return err
				}
				items = append(items, i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *UpsertProductVariantsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
