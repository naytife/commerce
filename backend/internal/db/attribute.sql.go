// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: attribute.sql

package db

import (
	"context"
)

const createAttribute = `-- name: CreateAttribute :one
INSERT INTO attributes (title, data_type, unit, required, applies_to, product_type_id, shop_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING attribute_id, title, data_type, unit, required, applies_to, shop_id, product_type_id
`

type CreateAttributeParams struct {
	Title         string             `json:"title"`
	DataType      AttributeDataType  `json:"data_type"`
	Unit          NullAttributeUnit  `json:"unit"`
	Required      bool               `json:"required"`
	AppliesTo     AttributeAppliesTo `json:"applies_to"`
	ProductTypeID int64              `json:"product_type_id"`
	ShopID        int64              `json:"shop_id"`
}

func (q *Queries) CreateAttribute(ctx context.Context, arg CreateAttributeParams) (Attribute, error) {
	row := q.db.QueryRow(ctx, createAttribute,
		arg.Title,
		arg.DataType,
		arg.Unit,
		arg.Required,
		arg.AppliesTo,
		arg.ProductTypeID,
		arg.ShopID,
	)
	var i Attribute
	err := row.Scan(
		&i.AttributeID,
		&i.Title,
		&i.DataType,
		&i.Unit,
		&i.Required,
		&i.AppliesTo,
		&i.ShopID,
		&i.ProductTypeID,
	)
	return i, err
}

const createAttributeOption = `-- name: CreateAttributeOption :one
INSERT INTO attribute_options (value, shop_id, attribute_id)
VALUES ($1, $2, $3)
RETURNING attribute_option_id, value, shop_id, attribute_id
`

type CreateAttributeOptionParams struct {
	Value       string `json:"value"`
	ShopID      int64  `json:"shop_id"`
	AttributeID int64  `json:"attribute_id"`
}

func (q *Queries) CreateAttributeOption(ctx context.Context, arg CreateAttributeOptionParams) (AttributeOption, error) {
	row := q.db.QueryRow(ctx, createAttributeOption, arg.Value, arg.ShopID, arg.AttributeID)
	var i AttributeOption
	err := row.Scan(
		&i.AttributeOptionID,
		&i.Value,
		&i.ShopID,
		&i.AttributeID,
	)
	return i, err
}

const deleteAttribute = `-- name: DeleteAttribute :one
DELETE FROM attributes
WHERE attribute_id = $1 AND shop_id = $2
RETURNING attribute_id, title, data_type, unit, required, applies_to, shop_id, product_type_id
`

type DeleteAttributeParams struct {
	AttributeID int64 `json:"attribute_id"`
	ShopID      int64 `json:"shop_id"`
}

func (q *Queries) DeleteAttribute(ctx context.Context, arg DeleteAttributeParams) (Attribute, error) {
	row := q.db.QueryRow(ctx, deleteAttribute, arg.AttributeID, arg.ShopID)
	var i Attribute
	err := row.Scan(
		&i.AttributeID,
		&i.Title,
		&i.DataType,
		&i.Unit,
		&i.Required,
		&i.AppliesTo,
		&i.ShopID,
		&i.ProductTypeID,
	)
	return i, err
}

const deleteAttributeOption = `-- name: DeleteAttributeOption :one
DELETE FROM attribute_options
WHERE attribute_option_id = $1 AND shop_id = $2
RETURNING attribute_option_id, value, shop_id, attribute_id
`

type DeleteAttributeOptionParams struct {
	AttributeOptionID int64 `json:"attribute_option_id"`
	ShopID            int64 `json:"shop_id"`
}

func (q *Queries) DeleteAttributeOption(ctx context.Context, arg DeleteAttributeOptionParams) (AttributeOption, error) {
	row := q.db.QueryRow(ctx, deleteAttributeOption, arg.AttributeOptionID, arg.ShopID)
	var i AttributeOption
	err := row.Scan(
		&i.AttributeOptionID,
		&i.Value,
		&i.ShopID,
		&i.AttributeID,
	)
	return i, err
}

const getAttribute = `-- name: GetAttribute :one
SELECT attribute_id, title, data_type, unit, required, applies_to, shop_id, product_type_id FROM attributes WHERE attribute_id = $1 AND shop_id = $2
`

type GetAttributeParams struct {
	AttributeID int64 `json:"attribute_id"`
	ShopID      int64 `json:"shop_id"`
}

func (q *Queries) GetAttribute(ctx context.Context, arg GetAttributeParams) (Attribute, error) {
	row := q.db.QueryRow(ctx, getAttribute, arg.AttributeID, arg.ShopID)
	var i Attribute
	err := row.Scan(
		&i.AttributeID,
		&i.Title,
		&i.DataType,
		&i.Unit,
		&i.Required,
		&i.AppliesTo,
		&i.ShopID,
		&i.ProductTypeID,
	)
	return i, err
}

const getAttributeOption = `-- name: GetAttributeOption :one
SELECT attribute_option_id, value, shop_id, attribute_id FROM attribute_options WHERE attribute_option_id = $1 AND shop_id = $2
`

type GetAttributeOptionParams struct {
	AttributeOptionID int64 `json:"attribute_option_id"`
	ShopID            int64 `json:"shop_id"`
}

func (q *Queries) GetAttributeOption(ctx context.Context, arg GetAttributeOptionParams) (AttributeOption, error) {
	row := q.db.QueryRow(ctx, getAttributeOption, arg.AttributeOptionID, arg.ShopID)
	var i AttributeOption
	err := row.Scan(
		&i.AttributeOptionID,
		&i.Value,
		&i.ShopID,
		&i.AttributeID,
	)
	return i, err
}

const getAttributeOptions = `-- name: GetAttributeOptions :many
SELECT attribute_option_id, value, shop_id, attribute_id FROM attribute_options WHERE attribute_id = $1 AND shop_id = $2
`

type GetAttributeOptionsParams struct {
	AttributeID int64 `json:"attribute_id"`
	ShopID      int64 `json:"shop_id"`
}

func (q *Queries) GetAttributeOptions(ctx context.Context, arg GetAttributeOptionsParams) ([]AttributeOption, error) {
	rows, err := q.db.Query(ctx, getAttributeOptions, arg.AttributeID, arg.ShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AttributeOption
	for rows.Next() {
		var i AttributeOption
		if err := rows.Scan(
			&i.AttributeOptionID,
			&i.Value,
			&i.ShopID,
			&i.AttributeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttributes = `-- name: GetAttributes :many
SELECT attribute_id, title, data_type, unit, required, applies_to, shop_id, product_type_id FROM attributes WHERE product_type_id = $1 AND shop_id = $2
`

type GetAttributesParams struct {
	ProductTypeID int64 `json:"product_type_id"`
	ShopID        int64 `json:"shop_id"`
}

func (q *Queries) GetAttributes(ctx context.Context, arg GetAttributesParams) ([]Attribute, error) {
	rows, err := q.db.Query(ctx, getAttributes, arg.ProductTypeID, arg.ShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attribute
	for rows.Next() {
		var i Attribute
		if err := rows.Scan(
			&i.AttributeID,
			&i.Title,
			&i.DataType,
			&i.Unit,
			&i.Required,
			&i.AppliesTo,
			&i.ShopID,
			&i.ProductTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductAttributeValues = `-- name: GetProductAttributeValues :many
SELECT 
    pav.product_id,
    pav.attribute_id,
    pav.shop_id,
    pav.attribute_option_id,
    COALESCE(ao.value, pav.value) as value
FROM product_attribute_values pav
LEFT JOIN attribute_options ao ON ao.attribute_option_id = pav.attribute_option_id
WHERE pav.product_id = $1 AND pav.shop_id = $2
`

type GetProductAttributeValuesParams struct {
	ProductID int64 `json:"product_id"`
	ShopID    int64 `json:"shop_id"`
}

type GetProductAttributeValuesRow struct {
	ProductID         int64  `json:"product_id"`
	AttributeID       int64  `json:"attribute_id"`
	ShopID            int64  `json:"shop_id"`
	AttributeOptionID *int64 `json:"attribute_option_id"`
	Value             string `json:"value"`
}

func (q *Queries) GetProductAttributeValues(ctx context.Context, arg GetProductAttributeValuesParams) ([]GetProductAttributeValuesRow, error) {
	rows, err := q.db.Query(ctx, getProductAttributeValues, arg.ProductID, arg.ShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductAttributeValuesRow
	for rows.Next() {
		var i GetProductAttributeValuesRow
		if err := rows.Scan(
			&i.ProductID,
			&i.AttributeID,
			&i.ShopID,
			&i.AttributeOptionID,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsAttributes = `-- name: GetProductsAttributes :many
SELECT attribute_id, title, data_type, unit, required, applies_to, shop_id, product_type_id FROM attributes WHERE applies_to = 'Product' AND product_type_id = $1 AND shop_id = $2
`

type GetProductsAttributesParams struct {
	ProductTypeID int64 `json:"product_type_id"`
	ShopID        int64 `json:"shop_id"`
}

func (q *Queries) GetProductsAttributes(ctx context.Context, arg GetProductsAttributesParams) ([]Attribute, error) {
	rows, err := q.db.Query(ctx, getProductsAttributes, arg.ProductTypeID, arg.ShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attribute
	for rows.Next() {
		var i Attribute
		if err := rows.Scan(
			&i.AttributeID,
			&i.Title,
			&i.DataType,
			&i.Unit,
			&i.Required,
			&i.AppliesTo,
			&i.ShopID,
			&i.ProductTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariationsAttributes = `-- name: GetVariationsAttributes :many
SELECT attribute_id, title, data_type, unit, required, applies_to, shop_id, product_type_id FROM attributes WHERE applies_to = 'ProductVariation' AND product_type_id = $1 AND shop_id = $2
`

type GetVariationsAttributesParams struct {
	ProductTypeID int64 `json:"product_type_id"`
	ShopID        int64 `json:"shop_id"`
}

func (q *Queries) GetVariationsAttributes(ctx context.Context, arg GetVariationsAttributesParams) ([]Attribute, error) {
	rows, err := q.db.Query(ctx, getVariationsAttributes, arg.ProductTypeID, arg.ShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attribute
	for rows.Next() {
		var i Attribute
		if err := rows.Scan(
			&i.AttributeID,
			&i.Title,
			&i.DataType,
			&i.Unit,
			&i.Required,
			&i.AppliesTo,
			&i.ShopID,
			&i.ProductTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAttribute = `-- name: UpdateAttribute :one
UPDATE attributes
SET 
    title = COALESCE($1, title),
    data_type = COALESCE($2, data_type),
    unit = COALESCE($3, unit),
    required = COALESCE($4, required),
    applies_to = COALESCE($5, applies_to)
WHERE attribute_id = $6 AND shop_id = $7
RETURNING attribute_id, title, data_type, unit, required, applies_to, shop_id, product_type_id
`

type UpdateAttributeParams struct {
	Title       *string                `json:"title"`
	DataType    NullAttributeDataType  `json:"data_type"`
	Unit        NullAttributeUnit      `json:"unit"`
	Required    *bool                  `json:"required"`
	AppliesTo   NullAttributeAppliesTo `json:"applies_to"`
	AttributeID int64                  `json:"attribute_id"`
	ShopID      int64                  `json:"shop_id"`
}

func (q *Queries) UpdateAttribute(ctx context.Context, arg UpdateAttributeParams) (Attribute, error) {
	row := q.db.QueryRow(ctx, updateAttribute,
		arg.Title,
		arg.DataType,
		arg.Unit,
		arg.Required,
		arg.AppliesTo,
		arg.AttributeID,
		arg.ShopID,
	)
	var i Attribute
	err := row.Scan(
		&i.AttributeID,
		&i.Title,
		&i.DataType,
		&i.Unit,
		&i.Required,
		&i.AppliesTo,
		&i.ShopID,
		&i.ProductTypeID,
	)
	return i, err
}

const updateAttributeOption = `-- name: UpdateAttributeOption :one
UPDATE attribute_options
SET 
    value = COALESCE($1, value)
WHERE attribute_option_id = $2 AND shop_id = $3
RETURNING attribute_option_id, value, shop_id, attribute_id
`

type UpdateAttributeOptionParams struct {
	Value             *string `json:"value"`
	AttributeOptionID int64   `json:"attribute_option_id"`
	ShopID            int64   `json:"shop_id"`
}

func (q *Queries) UpdateAttributeOption(ctx context.Context, arg UpdateAttributeOptionParams) (AttributeOption, error) {
	row := q.db.QueryRow(ctx, updateAttributeOption, arg.Value, arg.AttributeOptionID, arg.ShopID)
	var i AttributeOption
	err := row.Scan(
		&i.AttributeOptionID,
		&i.Value,
		&i.ShopID,
		&i.AttributeID,
	)
	return i, err
}
