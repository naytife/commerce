// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products ( slug, title, description, status, product_type_id, shop_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING product_id, slug, title, description, status, created_at, updated_at, product_type_id, category_id, shop_id
`

type CreateProductParams struct {
	Slug          string        `json:"slug"`
	Title         string        `json:"title"`
	Description   string        `json:"description"`
	Status        ProductStatus `json:"status"`
	ProductTypeID int64         `json:"product_type_id"`
	ShopID        int64         `json:"shop_id"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Slug,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.ProductTypeID,
		arg.ShopID,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductTypeID,
		&i.CategoryID,
		&i.ShopID,
	)
	return i, err
}

const createProductVariation = `-- name: CreateProductVariation :one
INSERT INTO product_variations (
    description, price, sku, available_quantity,
    seo_description, seo_keywords, seo_title,
    product_id, shop_id, is_default
)
VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, $8,
    $9, $10
)
RETURNING product_variation_id, sku, description, price, available_quantity, seo_description, seo_keywords, seo_title, is_default, created_at, updated_at, product_id, shop_id
`

type CreateProductVariationParams struct {
	Description       string         `json:"description"`
	Price             pgtype.Numeric `json:"price"`
	Sku               string         `json:"sku"`
	AvailableQuantity int64          `json:"available_quantity"`
	SeoDescription    *string        `json:"seo_description"`
	SeoKeywords       []string       `json:"seo_keywords"`
	SeoTitle          *string        `json:"seo_title"`
	ProductID         int64          `json:"product_id"`
	ShopID            int64          `json:"shop_id"`
	IsDefault         bool           `json:"is_default"`
}

func (q *Queries) CreateProductVariation(ctx context.Context, arg CreateProductVariationParams) (ProductVariation, error) {
	row := q.db.QueryRow(ctx, createProductVariation,
		arg.Description,
		arg.Price,
		arg.Sku,
		arg.AvailableQuantity,
		arg.SeoDescription,
		arg.SeoKeywords,
		arg.SeoTitle,
		arg.ProductID,
		arg.ShopID,
		arg.IsDefault,
	)
	var i ProductVariation
	err := row.Scan(
		&i.ProductVariationID,
		&i.Sku,
		&i.Description,
		&i.Price,
		&i.AvailableQuantity,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductID,
		&i.ShopID,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE product_id = $1 AND shop_id = $2
RETURNING product_id, slug, title, description, status, created_at, updated_at, product_type_id, category_id, shop_id
`

type DeleteProductParams struct {
	ProductID int64 `json:"product_id"`
	ShopID    int64 `json:"shop_id"`
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) error {
	_, err := q.db.Exec(ctx, deleteProduct, arg.ProductID, arg.ShopID)
	return err
}

const deleteProductVariants = `-- name: DeleteProductVariants :exec
DELETE FROM product_variations
WHERE shop_id = $1 AND product_id = $2
AND product_variation_id != ALL($3::bigint[])
`

type DeleteProductVariantsParams struct {
	ShopID              int64   `json:"shop_id"`
	ProductID           int64   `json:"product_id"`
	ProductVariationIds []int64 `json:"product_variation_ids"`
}

func (q *Queries) DeleteProductVariants(ctx context.Context, arg DeleteProductVariantsParams) error {
	_, err := q.db.Exec(ctx, deleteProductVariants, arg.ShopID, arg.ProductID, arg.ProductVariationIds)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT 
    p.product_id,
    p.title,
    p.slug,
    p.description,
    p.status,
    p.category_id,
    p.updated_at,
    p.created_at,

    -- Aggregate attributes separately to prevent duplication
    (
        SELECT COALESCE(
            jsonb_agg(
                jsonb_build_object(
                    'attribute_id', pa.attribute_id,
                    'title', a.title,
                    'attribute_option_id', pa.attribute_option_id,
                    'value', COALESCE(ao.value, pa.value)
                )
            ) FILTER (WHERE pa.attribute_id IS NOT NULL),
            '[]'::jsonb
        )
        FROM product_attribute_values pa
        LEFT JOIN attributes a ON a.attribute_id = pa.attribute_id
        LEFT JOIN attribute_options ao ON ao.attribute_option_id = pa.attribute_option_id
        WHERE pa.product_id = p.product_id
    )::jsonb AS attributes,

    -- Aggregate variants separately to prevent duplication
      (
        SELECT COALESCE(
            jsonb_agg(
                jsonb_build_object(
                    'variation_id', pv.product_variation_id,
                    'description', pv.description,
                    'price', pv.price,
                    'sku', pv.sku,
                    'available_quantity', pv.available_quantity,
                    'is_default', pv.is_default,
                    'attributes', (
                        SELECT COALESCE(
                            jsonb_agg(
                                jsonb_build_object(
                                    'attribute_id', pva.attribute_id,
                                    'title', a.title,
                                    'attribute_option_id', pva.attribute_option_id,
                                    'value', COALESCE(ao.value, pva.value)
                                )
                            ) FILTER (WHERE pva.attribute_id IS NOT NULL),
                            '[]'::jsonb
                        )
                        FROM product_variation_attribute_values pva
                        LEFT JOIN attributes a ON a.attribute_id = pva.attribute_id
                        LEFT JOIN attribute_options ao ON ao.attribute_option_id = pva.attribute_option_id
                        WHERE pva.product_variation_id = pv.product_variation_id
                    )
                )
            ) FILTER (WHERE pv.product_variation_id IS NOT NULL),
            '[]'::jsonb
        )
        FROM product_variations pv
        WHERE pv.product_id = p.product_id
    )::jsonb AS variants,
    
    -- Aggregate product images separately
    (
        SELECT COALESCE(
            jsonb_agg(
                jsonb_build_object(
                    'id', pi.product_image_id,
                    'url', pi.url,
                    'alt', pi.alt
                )
            ) FILTER (WHERE pi.product_image_id IS NOT NULL),
            '[]'::jsonb
        )
        FROM product_images pi
        WHERE pi.product_id = p.product_id
    )::jsonb AS images

FROM products p
WHERE p.product_id = $1 AND p.shop_id = $2
`

type GetProductParams struct {
	ProductID int64 `json:"product_id"`
	ShopID    int64 `json:"shop_id"`
}

type GetProductRow struct {
	ProductID   int64              `json:"product_id"`
	Title       string             `json:"title"`
	Slug        string             `json:"slug"`
	Description string             `json:"description"`
	Status      ProductStatus      `json:"status"`
	CategoryID  *int64             `json:"category_id"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	Attributes  []byte             `json:"attributes"`
	Variants    []byte             `json:"variants"`
	Images      []byte             `json:"images"`
}

func (q *Queries) GetProduct(ctx context.Context, arg GetProductParams) (GetProductRow, error) {
	row := q.db.QueryRow(ctx, getProduct, arg.ProductID, arg.ShopID)
	var i GetProductRow
	err := row.Scan(
		&i.ProductID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.Status,
		&i.CategoryID,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Attributes,
		&i.Variants,
		&i.Images,
	)
	return i, err
}

const getProductById = `-- name: GetProductById :one
SELECT product_id, slug, title, description, status, created_at, updated_at, product_type_id, category_id, shop_id FROM products
WHERE product_id = $1 AND shop_id = $2
`

type GetProductByIdParams struct {
	ProductID int64 `json:"product_id"`
	ShopID    int64 `json:"shop_id"`
}

func (q *Queries) GetProductById(ctx context.Context, arg GetProductByIdParams) (Product, error) {
	row := q.db.QueryRow(ctx, getProductById, arg.ProductID, arg.ShopID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductTypeID,
		&i.CategoryID,
		&i.ShopID,
	)
	return i, err
}

const getProductTypeByProduct = `-- name: GetProductTypeByProduct :one
SELECT pt.product_type_id, pt.title, pt.shippable, pt.digital, pt.sku_substring, pt.shop_id
FROM products p
JOIN product_types pt ON p.product_type_id = pt.product_type_id
WHERE p.product_id = $1 AND p.shop_id = $2
`

type GetProductTypeByProductParams struct {
	ProductID int64 `json:"product_id"`
	ShopID    int64 `json:"shop_id"`
}

func (q *Queries) GetProductTypeByProduct(ctx context.Context, arg GetProductTypeByProductParams) (ProductType, error) {
	row := q.db.QueryRow(ctx, getProductTypeByProduct, arg.ProductID, arg.ShopID)
	var i ProductType
	err := row.Scan(
		&i.ProductTypeID,
		&i.Title,
		&i.Shippable,
		&i.Digital,
		&i.SkuSubstring,
		&i.ShopID,
	)
	return i, err
}

const getProductVariants = `-- name: GetProductVariants :many
SELECT product_variation_id, sku, description, price, available_quantity, seo_description, seo_keywords, seo_title, is_default, created_at, updated_at, product_id, shop_id FROM product_variations
WHERE shop_id = $1 AND product_id = $2
ORDER BY product_variation_id
`

type GetProductVariantsParams struct {
	ShopID    int64 `json:"shop_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) GetProductVariants(ctx context.Context, arg GetProductVariantsParams) ([]ProductVariation, error) {
	rows, err := q.db.Query(ctx, getProductVariants, arg.ShopID, arg.ProductID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductVariation
	for rows.Next() {
		var i ProductVariation
		if err := rows.Scan(
			&i.ProductVariationID,
			&i.Sku,
			&i.Description,
			&i.Price,
			&i.AvailableQuantity,
			&i.SeoDescription,
			&i.SeoKeywords,
			&i.SeoTitle,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProductID,
			&i.ShopID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProducts = `-- name: GetProducts :many
SELECT 
    p.product_id,
    p.slug,
    p.title,
    p.description,
    p.status,
    p.category_id,
    p.updated_at,
    p.created_at,

    -- Product attributes
    (
        SELECT COALESCE(
            jsonb_agg(
                jsonb_build_object(
                    'attribute_id', pa.attribute_id,
                    'title', a.title,
                    'attribute_option_id', pa.attribute_option_id,
                    'value', COALESCE(ao.value, pa.value)
                )
            ) FILTER (WHERE pa.attribute_id IS NOT NULL),
            '[]'::jsonb
        )
        FROM product_attribute_values pa
        LEFT JOIN attributes a ON a.attribute_id = pa.attribute_id
        LEFT JOIN attribute_options ao ON ao.attribute_option_id = pa.attribute_option_id
        WHERE pa.product_id = p.product_id
    )::jsonb AS attributes,

    -- Product variants with embedded attributes
    (
        SELECT COALESCE(
            jsonb_agg(
                jsonb_build_object(
                    'variation_id', pv.product_variation_id,
                    'description', pv.description,
                    'price', pv.price,
                    'sku', pv.sku,
                    'available_quantity', pv.available_quantity,
                    'is_default', pv.is_default,
                    'attributes', (
                        SELECT COALESCE(
                            jsonb_agg(
                                jsonb_build_object(
                                    'attribute_id', pva.attribute_id,
                                    'title', a.title,
                                    'attribute_option_id', pva.attribute_option_id,
                                    'value', COALESCE(ao.value, pva.value)
                                )
                            ) FILTER (WHERE pva.attribute_id IS NOT NULL),
                            '[]'::jsonb
                        )
                        FROM product_variation_attribute_values pva
                        LEFT JOIN attributes a ON a.attribute_id = pva.attribute_id
                        LEFT JOIN attribute_options ao ON ao.attribute_option_id = pva.attribute_option_id
                        WHERE pva.product_variation_id = pv.product_variation_id
                    )
                )
            ) FILTER (WHERE pv.product_variation_id IS NOT NULL),
            '[]'::jsonb
        )
        FROM product_variations pv
        WHERE pv.product_id = p.product_id
    )::jsonb AS variants,
    
    -- Product images
    (
        SELECT COALESCE(
            jsonb_agg(
                jsonb_build_object(
                    'id', pi.product_image_id,
                    'url', pi.url,
                    'alt', pi.alt
                )
            ) FILTER (WHERE pi.product_image_id IS NOT NULL),
            '[]'::jsonb
        )
        FROM product_images pi
        WHERE pi.product_id = p.product_id
    )::jsonb AS images

FROM products p
WHERE p.shop_id = $1 
AND p.product_id > $2
ORDER BY p.product_id
LIMIT $3
`

type GetProductsParams struct {
	ShopID int64 `json:"shop_id"`
	After  int64 `json:"after"`
	Limit  int32 `json:"limit"`
}

type GetProductsRow struct {
	ProductID   int64              `json:"product_id"`
	Slug        string             `json:"slug"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	Status      ProductStatus      `json:"status"`
	CategoryID  *int64             `json:"category_id"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	Attributes  []byte             `json:"attributes"`
	Variants    []byte             `json:"variants"`
	Images      []byte             `json:"images"`
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]GetProductsRow, error) {
	rows, err := q.db.Query(ctx, getProducts, arg.ShopID, arg.After, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ProductID,
			&i.Slug,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CategoryID,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Attributes,
			&i.Variants,
			&i.Images,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT 
    p.product_id, 
    p.title, 
    p.description, 
    p.created_at, 
    p.updated_at, 
    p.category_id
FROM 
    products p
LEFT JOIN 
    categories c ON p.category_id = c.category_id
WHERE 
    p.category_id = $1 
    AND p.product_id > $2
LIMIT $3
`

type GetProductsByCategoryParams struct {
	CategoryID *int64 `json:"category_id"`
	After      int64  `json:"after"`
	Limit      int32  `json:"limit"`
}

type GetProductsByCategoryRow struct {
	ProductID   int64              `json:"product_id"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	CategoryID  *int64             `json:"category_id"`
}

func (q *Queries) GetProductsByCategory(ctx context.Context, arg GetProductsByCategoryParams) ([]GetProductsByCategoryRow, error) {
	rows, err := q.db.Query(ctx, getProductsByCategory, arg.CategoryID, arg.After, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsByCategoryRow
	for rows.Next() {
		var i GetProductsByCategoryRow
		if err := rows.Scan(
			&i.ProductID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByType = `-- name: GetProductsByType :many
SELECT 
    p.product_id,
    p.slug,
    p.title,
    p.description,
    p.status,
    p.category_id,
    p.updated_at,
    p.created_at,

    -- Aggregate attributes separately
    (
        SELECT COALESCE(
            json_agg(
                json_build_object(
                    'attribute_id', pa.attribute_id,
                    'title', a.title,
                    'attribute_option_id', pa.attribute_option_id,
                    'value', COALESCE(ao.value, pa.value)
                )
            ) FILTER (WHERE pa.attribute_id IS NOT NULL),
            '[]'::json
        )
        FROM product_attribute_values pa
        LEFT JOIN attributes a ON a.attribute_id = pa.attribute_id
        LEFT JOIN attribute_options ao ON ao.attribute_option_id = pa.attribute_option_id
        WHERE pa.product_id = p.product_id
    ) AS attributes,

    -- Aggregate variants separately
      (
        SELECT COALESCE(
            jsonb_agg(
                jsonb_build_object(
                    'variation_id', pv.product_variation_id,
                    'description', pv.description,
                    'price', pv.price,
                    'sku', pv.sku,
                    'available_quantity', pv.available_quantity,
                    'is_default', pv.is_default,
                    'attributes', (
                        SELECT COALESCE(
                            jsonb_agg(
                                jsonb_build_object(
                                    'attribute_id', pva.attribute_id,
                                    'title', a.title,
                                    'attribute_option_id', pva.attribute_option_id,
                                    'value', COALESCE(ao.value, pva.value)
                                )
                            ) FILTER (WHERE pva.attribute_id IS NOT NULL),
                            '[]'::jsonb
                        )
                        FROM product_variation_attribute_values pva
                        LEFT JOIN attributes a ON a.attribute_id = pva.attribute_id
                        LEFT JOIN attribute_options ao ON ao.attribute_option_id = pva.attribute_option_id
                        WHERE pva.product_variation_id = pv.product_variation_id
                    )
                )
            ) FILTER (WHERE pv.product_variation_id IS NOT NULL),
            '[]'::jsonb
        )
        FROM product_variations pv
        WHERE pv.product_id = p.product_id
    )::jsonb AS variants,

    -- Aggregate product images
    (
        SELECT COALESCE(
            jsonb_agg(
                jsonb_build_object(
                    'id', pi.product_image_id,
                    'url', pi.url,
                    'alt', pi.alt
                )
            ) FILTER (WHERE pi.product_image_id IS NOT NULL),
            '[]'::jsonb
        )
        FROM product_images pi
        WHERE pi.product_id = p.product_id
    )::jsonb AS images

FROM products p
WHERE p.shop_id = $1 
AND p.product_type_id = $2
AND p.product_id > $3
ORDER BY p.product_id
LIMIT $4
`

type GetProductsByTypeParams struct {
	ShopID        int64 `json:"shop_id"`
	ProductTypeID int64 `json:"product_type_id"`
	After         int64 `json:"after"`
	Limit         int32 `json:"limit"`
}

type GetProductsByTypeRow struct {
	ProductID   int64              `json:"product_id"`
	Slug        string             `json:"slug"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	Status      ProductStatus      `json:"status"`
	CategoryID  *int64             `json:"category_id"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	Attributes  interface{}        `json:"attributes"`
	Variants    []byte             `json:"variants"`
	Images      []byte             `json:"images"`
}

func (q *Queries) GetProductsByType(ctx context.Context, arg GetProductsByTypeParams) ([]GetProductsByTypeRow, error) {
	rows, err := q.db.Query(ctx, getProductsByType,
		arg.ShopID,
		arg.ProductTypeID,
		arg.After,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsByTypeRow
	for rows.Next() {
		var i GetProductsByTypeRow
		if err := rows.Scan(
			&i.ProductID,
			&i.Slug,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CategoryID,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Attributes,
			&i.Variants,
			&i.Images,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET 
    title = COALESCE($1, title),
    description = COALESCE($2, description),
    updated_at = NOW()
WHERE product_id = $3 AND shop_id = $4
RETURNING product_id, slug, title, description, status, created_at, updated_at, product_type_id, category_id, shop_id
`

type UpdateProductParams struct {
	Title       *string `json:"title"`
	Description *string `json:"description"`
	ProductID   int64   `json:"product_id"`
	ShopID      int64   `json:"shop_id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.Title,
		arg.Description,
		arg.ProductID,
		arg.ShopID,
	)
	return err
}

const updateProductVariation = `-- name: UpdateProductVariation :one
UPDATE product_variations
SET 
    description = COALESCE($1, description),
    price = COALESCE($2, price),
    available_quantity = COALESCE($3, available_quantity),
    seo_description = COALESCE($4, seo_description),
    seo_keywords = COALESCE($5, seo_keywords),
    seo_title = COALESCE($6, seo_title),
    is_default = COALESCE($7, is_default),
    updated_at = NOW()
WHERE product_variation_id = $8 AND shop_id = $9
RETURNING product_variation_id, sku, description, price, available_quantity, seo_description, seo_keywords, seo_title, is_default, created_at, updated_at, product_id, shop_id
`

type UpdateProductVariationParams struct {
	Description        *string        `json:"description"`
	Price              pgtype.Numeric `json:"price"`
	AvailableQuantity  *int64         `json:"available_quantity"`
	SeoDescription     *string        `json:"seo_description"`
	SeoKeywords        []string       `json:"seo_keywords"`
	SeoTitle           *string        `json:"seo_title"`
	IsDefault          *bool          `json:"is_default"`
	ProductVariationID int64          `json:"product_variation_id"`
	ShopID             int64          `json:"shop_id"`
}

func (q *Queries) UpdateProductVariation(ctx context.Context, arg UpdateProductVariationParams) (ProductVariation, error) {
	row := q.db.QueryRow(ctx, updateProductVariation,
		arg.Description,
		arg.Price,
		arg.AvailableQuantity,
		arg.SeoDescription,
		arg.SeoKeywords,
		arg.SeoTitle,
		arg.IsDefault,
		arg.ProductVariationID,
		arg.ShopID,
	)
	var i ProductVariation
	err := row.Scan(
		&i.ProductVariationID,
		&i.Sku,
		&i.Description,
		&i.Price,
		&i.AvailableQuantity,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductID,
		&i.ShopID,
	)
	return i, err
}

const updateProductVariationSku = `-- name: UpdateProductVariationSku :one
UPDATE product_variations
SET sku = $2
WHERE product_variation_id = $1 AND shop_id = $3
RETURNING product_variation_id, sku, description, price, available_quantity, seo_description, seo_keywords, seo_title, is_default, created_at, updated_at, product_id, shop_id
`

type UpdateProductVariationSkuParams struct {
	ProductVariationID int64  `json:"product_variation_id"`
	Sku                string `json:"sku"`
	ShopID             int64  `json:"shop_id"`
}

func (q *Queries) UpdateProductVariationSku(ctx context.Context, arg UpdateProductVariationSkuParams) (ProductVariation, error) {
	row := q.db.QueryRow(ctx, updateProductVariationSku, arg.ProductVariationID, arg.Sku, arg.ShopID)
	var i ProductVariation
	err := row.Scan(
		&i.ProductVariationID,
		&i.Sku,
		&i.Description,
		&i.Price,
		&i.AvailableQuantity,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductID,
		&i.ShopID,
	)
	return i, err
}
