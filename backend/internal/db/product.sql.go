// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products ( title, description, status, product_type_id, shop_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING product_id, title, description, created_at, updated_at, product_type_id, category_id, shop_id, status
`

type CreateProductParams struct {
	Title         string        `json:"title"`
	Description   string        `json:"description"`
	Status        ProductStatus `json:"status"`
	ProductTypeID int64         `json:"product_type_id"`
	ShopID        int64         `json:"shop_id"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.ProductTypeID,
		arg.ShopID,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductTypeID,
		&i.CategoryID,
		&i.ShopID,
		&i.Status,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :one
DELETE FROM products
WHERE product_id = $1 AND shop_id = $2
RETURNING product_id, title, description, created_at, updated_at, product_type_id, category_id, shop_id, status
`

type DeleteProductParams struct {
	ProductID int64 `json:"product_id"`
	ShopID    int64 `json:"shop_id"`
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, deleteProduct, arg.ProductID, arg.ShopID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductTypeID,
		&i.CategoryID,
		&i.ShopID,
		&i.Status,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT 
    p.product_id, 
    p.title, 
    p.description, 
    p.created_at, 
    p.updated_at, 
    p.category_id,
    p.status
FROM 
    products p
LEFT JOIN 
    categories c ON p.category_id = c.category_id
WHERE 
    p.shop_id = $1 
    AND p.product_id = $2
`

type GetProductParams struct {
	ShopID    int64 `json:"shop_id"`
	ProductID int64 `json:"product_id"`
}

type GetProductRow struct {
	ProductID   int64              `json:"product_id"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	CategoryID  *int64             `json:"category_id"`
	Status      ProductStatus      `json:"status"`
}

func (q *Queries) GetProduct(ctx context.Context, arg GetProductParams) (GetProductRow, error) {
	row := q.db.QueryRow(ctx, getProduct, arg.ShopID, arg.ProductID)
	var i GetProductRow
	err := row.Scan(
		&i.ProductID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CategoryID,
		&i.Status,
	)
	return i, err
}

const getProductVariations = `-- name: GetProductVariations :many
SELECT product_variation_id, sku, slug, description, price, available_quantity, seo_description, seo_keywords, seo_title, created_at, updated_at, product_id, shop_id FROM product_variations
WHERE shop_id = $1 AND product_id = $2
ORDER BY product_variation_id
`

type GetProductVariationsParams struct {
	ShopID    int64 `json:"shop_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) GetProductVariations(ctx context.Context, arg GetProductVariationsParams) ([]ProductVariation, error) {
	rows, err := q.db.Query(ctx, getProductVariations, arg.ShopID, arg.ProductID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductVariation
	for rows.Next() {
		var i ProductVariation
		if err := rows.Scan(
			&i.ProductVariationID,
			&i.Sku,
			&i.Slug,
			&i.Description,
			&i.Price,
			&i.AvailableQuantity,
			&i.SeoDescription,
			&i.SeoKeywords,
			&i.SeoTitle,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProductID,
			&i.ShopID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductWithAttributes = `-- name: GetProductWithAttributes :one
SELECT 
    p.product_id,
    p.title,
    p.description,
    p.status,
    p.category_id,
    p.updated_at,
    p.created_at,
    COALESCE(
        json_agg(
            json_build_object(
                'attribute_id', pa.attribute_id,
                'attribute_option_id', pa.attribute_option_id,
                'value', pa.value
            )
        ) FILTER (WHERE pa.attribute_id IS NOT NULL),
        '[]'::json
    ) AS attributes
FROM products p
LEFT JOIN product_attribute_values pa ON p.product_id = pa.product_id
WHERE p.product_id = $1
GROUP BY p.product_id
`

type GetProductWithAttributesRow struct {
	ProductID   int64              `json:"product_id"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	Status      ProductStatus      `json:"status"`
	CategoryID  *int64             `json:"category_id"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	Attributes  interface{}        `json:"attributes"`
}

func (q *Queries) GetProductWithAttributes(ctx context.Context, productID int64) (GetProductWithAttributesRow, error) {
	row := q.db.QueryRow(ctx, getProductWithAttributes, productID)
	var i GetProductWithAttributesRow
	err := row.Scan(
		&i.ProductID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CategoryID,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Attributes,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT 
    p.product_id, 
    p.title, 
    p.description, 
    p.created_at, 
    p.updated_at, 
    p.status
FROM 
    products p
LEFT JOIN 
    categories c ON p.category_id = c.category_id
WHERE 
    p.shop_id = $1
    AND p.product_id > $2
LIMIT $3
`

type GetProductsParams struct {
	ShopID int64 `json:"shop_id"`
	After  int64 `json:"after"`
	Limit  int32 `json:"limit"`
}

type GetProductsRow struct {
	ProductID   int64              `json:"product_id"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	Status      ProductStatus      `json:"status"`
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]GetProductsRow, error) {
	rows, err := q.db.Query(ctx, getProducts, arg.ShopID, arg.After, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ProductID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByCategory = `-- name: GetProductsByCategory :many

SELECT 
    p.product_id, 
    p.title, 
    p.description, 
    p.created_at, 
    p.updated_at, 
    p.category_id
FROM 
    products p
LEFT JOIN 
    categories c ON p.category_id = c.category_id
WHERE 
    p.category_id = $1 
    AND p.product_id > $2
LIMIT $3
`

type GetProductsByCategoryParams struct {
	CategoryID *int64 `json:"category_id"`
	After      int64  `json:"after"`
	Limit      int32  `json:"limit"`
}

type GetProductsByCategoryRow struct {
	ProductID   int64              `json:"product_id"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	CategoryID  *int64             `json:"category_id"`
}

// SELECT
//
//	p.product_id,
//	p.title,
//	p.description,
//	p.created_at,
//	p.updated_at,
//	p.category_id
//
// FROM
//
//	products p
//
// LEFT JOIN
//
//	categories c ON p.category_id = c.category_id
//
// WHERE
//
//	p.shop_id = sqlc.arg('shop_id')
//	AND p.product_id > sqlc.arg('after')
//
// LIMIT sqlc.arg('limit');
func (q *Queries) GetProductsByCategory(ctx context.Context, arg GetProductsByCategoryParams) ([]GetProductsByCategoryRow, error) {
	rows, err := q.db.Query(ctx, getProductsByCategory, arg.CategoryID, arg.After, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsByCategoryRow
	for rows.Next() {
		var i GetProductsByCategoryRow
		if err := rows.Scan(
			&i.ProductID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one

UPDATE products
SET 
    title = COALESCE($1, title),
    description = COALESCE($2, description),
    updated_at = NOW()
WHERE product_id = $3 AND shop_id = $4
RETURNING product_id, title, description, created_at, updated_at, product_type_id, category_id, shop_id, status
`

type UpdateProductParams struct {
	Title       *string `json:"title"`
	Description *string `json:"description"`
	ProductID   int64   `json:"product_id"`
	ShopID      int64   `json:"shop_id"`
}

// xname: GetProductAllowedAttributes :one
// SELECT
//
//	(p.allowed_attributes || COALESCE(c.category_attributes, '{}'))::jsonb AS allowed_attributes
//
// FROM
//
//	products p
//
// LEFT JOIN
//
//	categories c ON p.category_id = c.category_id
//
// WHERE
//
//	p.product_id = sqlc.arg('product_id');
func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Title,
		arg.Description,
		arg.ProductID,
		arg.ShopID,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductTypeID,
		&i.CategoryID,
		&i.ShopID,
		&i.Status,
	)
	return i, err
}
