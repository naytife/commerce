// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products ( title, description, category_id, shop_id, allowed_attributes, status)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING product_id, title, description, allowed_attributes, created_at, updated_at, status, category_id, shop_id
`

type CreateProductParams struct {
	Title             string `json:"title"`
	Description       string `json:"description"`
	CategoryID        int64  `json:"category_id"`
	ShopID            int64  `json:"shop_id"`
	AllowedAttributes []byte `json:"allowed_attributes"`
	Status            string `json:"status"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Title,
		arg.Description,
		arg.CategoryID,
		arg.ShopID,
		arg.AllowedAttributes,
		arg.Status,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Title,
		&i.Description,
		&i.AllowedAttributes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.CategoryID,
		&i.ShopID,
	)
	return i, err
}

const createProductAllowedAttribute = `-- name: CreateProductAllowedAttribute :one
UPDATE products
SET allowed_attributes = jsonb_set(
    COALESCE(allowed_attributes, '{}'), 
    ARRAY[UPPER($1)::text], 
    to_jsonb($2::text)
)
WHERE product_id = $3
RETURNING allowed_attributes
`

type CreateProductAllowedAttributeParams struct {
	Title     interface{} `json:"title"`
	DataType  string      `json:"data_type"`
	ProductID int64       `json:"product_id"`
}

func (q *Queries) CreateProductAllowedAttribute(ctx context.Context, arg CreateProductAllowedAttributeParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, createProductAllowedAttribute, arg.Title, arg.DataType, arg.ProductID)
	var allowed_attributes []byte
	err := row.Scan(&allowed_attributes)
	return allowed_attributes, err
}

const deleteProductAllowedAttribute = `-- name: DeleteProductAllowedAttribute :one
UPDATE products
SET allowed_attributes = allowed_attributes - UPPER($1::text)
WHERE product_id = $2
RETURNING allowed_attributes
`

type DeleteProductAllowedAttributeParams struct {
	Attribute string `json:"attribute"`
	ProductID int64  `json:"product_id"`
}

func (q *Queries) DeleteProductAllowedAttribute(ctx context.Context, arg DeleteProductAllowedAttributeParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, deleteProductAllowedAttribute, arg.Attribute, arg.ProductID)
	var allowed_attributes []byte
	err := row.Scan(&allowed_attributes)
	return allowed_attributes, err
}

const getProduct = `-- name: GetProduct :one
SELECT product_id, title, description, created_at, updated_at, status, category_id
FROM products
WHERE shop_id = $1 AND product_id = $2
`

type GetProductParams struct {
	ShopID    int64 `json:"shop_id"`
	ProductID int64 `json:"product_id"`
}

type GetProductRow struct {
	ProductID   int64              `json:"product_id"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	Status      string             `json:"status"`
	CategoryID  int64              `json:"category_id"`
}

func (q *Queries) GetProduct(ctx context.Context, arg GetProductParams) (GetProductRow, error) {
	row := q.db.QueryRow(ctx, getProduct, arg.ShopID, arg.ProductID)
	var i GetProductRow
	err := row.Scan(
		&i.ProductID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.CategoryID,
	)
	return i, err
}

const getProductAllowedAttributes = `-- name: GetProductAllowedAttributes :one
SELECT allowed_attributes
FROM products
WHERE product_id = $1
`

func (q *Queries) GetProductAllowedAttributes(ctx context.Context, productID int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, getProductAllowedAttributes, productID)
	var allowed_attributes []byte
	err := row.Scan(&allowed_attributes)
	return allowed_attributes, err
}

const getProductVariations = `-- name: GetProductVariations :many
SELECT product_variation_id, slug, description, price, available_quantity, attributes, seo_description, seo_keywords, seo_title, created_at, updated_at, product_id, shop_id FROM product_variations
WHERE shop_id = $1 AND product_id = $2
ORDER BY product_variation_id
`

type GetProductVariationsParams struct {
	ShopID    int64 `json:"shop_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) GetProductVariations(ctx context.Context, arg GetProductVariationsParams) ([]ProductVariation, error) {
	rows, err := q.db.Query(ctx, getProductVariations, arg.ShopID, arg.ProductID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductVariation
	for rows.Next() {
		var i ProductVariation
		if err := rows.Scan(
			&i.ProductVariationID,
			&i.Slug,
			&i.Description,
			&i.Price,
			&i.AvailableQuantity,
			&i.Attributes,
			&i.SeoDescription,
			&i.SeoKeywords,
			&i.SeoTitle,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProductID,
			&i.ShopID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProducts = `-- name: GetProducts :many
SELECT product_id, title, description, created_at, updated_at, status, category_id
FROM products
WHERE shop_id = $1 AND product_id > $2
LIMIT $3
`

type GetProductsParams struct {
	ShopID int64 `json:"shop_id"`
	After  int64 `json:"after"`
	Limit  int32 `json:"limit"`
}

type GetProductsRow struct {
	ProductID   int64              `json:"product_id"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	Status      string             `json:"status"`
	CategoryID  int64              `json:"category_id"`
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]GetProductsRow, error) {
	rows, err := q.db.Query(ctx, getProducts, arg.ShopID, arg.After, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ProductID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT product_id, title, description, created_at, updated_at, status, category_id
FROM products
WHERE category_id = $1 AND product_id > $2
LIMIT $3
`

type GetProductsByCategoryParams struct {
	CategoryID int64 `json:"category_id"`
	After      int64 `json:"after"`
	Limit      int32 `json:"limit"`
}

type GetProductsByCategoryRow struct {
	ProductID   int64              `json:"product_id"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	Status      string             `json:"status"`
	CategoryID  int64              `json:"category_id"`
}

func (q *Queries) GetProductsByCategory(ctx context.Context, arg GetProductsByCategoryParams) ([]GetProductsByCategoryRow, error) {
	rows, err := q.db.Query(ctx, getProductsByCategory, arg.CategoryID, arg.After, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsByCategoryRow
	for rows.Next() {
		var i GetProductsByCategoryRow
		if err := rows.Scan(
			&i.ProductID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET 
    title = COALESCE($1, title),
    description = COALESCE($2, description)
WHERE product_id = $3
RETURNING product_id, title, description, allowed_attributes, created_at, updated_at, status, category_id, shop_id
`

type UpdateProductParams struct {
	Title       *string `json:"title"`
	Description *string `json:"description"`
	ProductID   int64   `json:"product_id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct, arg.Title, arg.Description, arg.ProductID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Title,
		&i.Description,
		&i.AllowedAttributes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.CategoryID,
		&i.ShopID,
	)
	return i, err
}
