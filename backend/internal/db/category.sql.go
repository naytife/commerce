// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: category.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (slug, title, description, parent_id, shop_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING category_id, slug, title, description, parent_id, shop_id
`

type CreateCategoryParams struct {
	Slug        string  `json:"slug"`
	Title       string  `json:"title"`
	Description *string `json:"description"`
	ParentID    *int64  `json:"parent_id"`
	ShopID      int64   `json:"shop_id"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.Slug,
		arg.Title,
		arg.Description,
		arg.ParentID,
		arg.ShopID,
	)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.ParentID,
		&i.ShopID,
	)
	return i, err
}

const getCategories = `-- name: GetCategories :many
SELECT category_id, slug, title, description
FROM categories
WHERE shop_id = $1 AND parent_id IS NULL AND category_id > $2
LIMIT $3
`

type GetCategoriesParams struct {
	ShopID int64 `json:"shop_id"`
	After  int64 `json:"after"`
	Limit  int32 `json:"limit"`
}

type GetCategoriesRow struct {
	CategoryID  int64   `json:"category_id"`
	Slug        string  `json:"slug"`
	Title       string  `json:"title"`
	Description *string `json:"description"`
}

func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]GetCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getCategories, arg.ShopID, arg.After, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesRow
	for rows.Next() {
		var i GetCategoriesRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.Slug,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT category_id, slug, title, description, parent_id
FROM categories
WHERE shop_id = $1 AND category_id = $2
`

type GetCategoryParams struct {
	ShopID     int64 `json:"shop_id"`
	CategoryID int64 `json:"category_id"`
}

type GetCategoryRow struct {
	CategoryID  int64   `json:"category_id"`
	Slug        string  `json:"slug"`
	Title       string  `json:"title"`
	Description *string `json:"description"`
	ParentID    *int64  `json:"parent_id"`
}

func (q *Queries) GetCategory(ctx context.Context, arg GetCategoryParams) (GetCategoryRow, error) {
	row := q.db.QueryRow(ctx, getCategory, arg.ShopID, arg.CategoryID)
	var i GetCategoryRow
	err := row.Scan(
		&i.CategoryID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.ParentID,
	)
	return i, err
}

const getCategoryChildren = `-- name: GetCategoryChildren :many
SELECT category_id, slug, title, description
FROM categories
WHERE shop_id = $1 AND parent_id = $2 AND category_id > $3
LIMIT $4
`

type GetCategoryChildrenParams struct {
	ShopID   int64  `json:"shop_id"`
	ParentID *int64 `json:"parent_id"`
	After    int64  `json:"after"`
	Limit    int32  `json:"limit"`
}

type GetCategoryChildrenRow struct {
	CategoryID  int64   `json:"category_id"`
	Slug        string  `json:"slug"`
	Title       string  `json:"title"`
	Description *string `json:"description"`
}

func (q *Queries) GetCategoryChildren(ctx context.Context, arg GetCategoryChildrenParams) ([]GetCategoryChildrenRow, error) {
	rows, err := q.db.Query(ctx, getCategoryChildren,
		arg.ShopID,
		arg.ParentID,
		arg.After,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoryChildrenRow
	for rows.Next() {
		var i GetCategoryChildrenRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.Slug,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET 
    title = COALESCE($1, title),
    description = COALESCE($2, description),
    parent_id = COALESCE($3, parent_id)
WHERE category_id = $4
RETURNING category_id, slug, title, description, parent_id, shop_id
`

type UpdateCategoryParams struct {
	Title       *string `json:"title"`
	Description *string `json:"description"`
	ParentID    *int64  `json:"parent_id"`
	CategoryID  int64   `json:"category_id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.Title,
		arg.Description,
		arg.ParentID,
		arg.CategoryID,
	)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.ParentID,
		&i.ShopID,
	)
	return i, err
}
