// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (slug, title, description, parent_id, shop_id, category_attributes)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING category_id, slug, title, description, parent_id, created_at, updated_at, shop_id, category_attributes
`

type CreateCategoryParams struct {
	Slug               string
	Title              string
	Description        pgtype.Text
	ParentID           pgtype.Int8
	ShopID             int64
	CategoryAttributes []byte
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.Slug,
		arg.Title,
		arg.Description,
		arg.ParentID,
		arg.ShopID,
		arg.CategoryAttributes,
	)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShopID,
		&i.CategoryAttributes,
	)
	return i, err
}

const createCategoryAttribute = `-- name: CreateCategoryAttribute :one
UPDATE categories
SET category_attributes = jsonb_set(
    COALESCE(category_attributes, '{}'), 
    ARRAY[UPPER($1)::text], 
    to_jsonb($2::text)
)
WHERE category_id = $3
RETURNING category_attributes
`

type CreateCategoryAttributeParams struct {
	Title      interface{}
	DataType   string
	CategoryID int64
}

func (q *Queries) CreateCategoryAttribute(ctx context.Context, arg CreateCategoryAttributeParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, createCategoryAttribute, arg.Title, arg.DataType, arg.CategoryID)
	var category_attributes []byte
	err := row.Scan(&category_attributes)
	return category_attributes, err
}

const deleteCategoryAttribute = `-- name: DeleteCategoryAttribute :one
UPDATE categories
SET category_attributes = category_attributes - $1::text
WHERE category_id = $2
RETURNING category_attributes
`

type DeleteCategoryAttributeParams struct {
	Attribute  string
	CategoryID int64
}

func (q *Queries) DeleteCategoryAttribute(ctx context.Context, arg DeleteCategoryAttributeParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, deleteCategoryAttribute, arg.Attribute, arg.CategoryID)
	var category_attributes []byte
	err := row.Scan(&category_attributes)
	return category_attributes, err
}

const getCategories = `-- name: GetCategories :many
SELECT category_id, slug, title, description, created_at, updated_at
FROM categories
WHERE shop_id = $1 AND category_id > $2
LIMIT $3
`

type GetCategoriesParams struct {
	ShopID int64
	After  int64
	Limit  int32
}

type GetCategoriesRow struct {
	CategoryID  int64
	Slug        string
	Title       string
	Description pgtype.Text
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]GetCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getCategories, arg.ShopID, arg.After, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesRow
	for rows.Next() {
		var i GetCategoriesRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.Slug,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT category_id, slug, title, description, created_at, updated_at, parent_id, category_attributes
FROM categories
WHERE shop_id = $1 AND category_id = $2
`

type GetCategoryParams struct {
	ShopID     int64
	CategoryID int64
}

type GetCategoryRow struct {
	CategoryID         int64
	Slug               string
	Title              string
	Description        pgtype.Text
	CreatedAt          pgtype.Timestamptz
	UpdatedAt          pgtype.Timestamptz
	ParentID           pgtype.Int8
	CategoryAttributes []byte
}

func (q *Queries) GetCategory(ctx context.Context, arg GetCategoryParams) (GetCategoryRow, error) {
	row := q.db.QueryRow(ctx, getCategory, arg.ShopID, arg.CategoryID)
	var i GetCategoryRow
	err := row.Scan(
		&i.CategoryID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ParentID,
		&i.CategoryAttributes,
	)
	return i, err
}

const getCategoryAttributes = `-- name: GetCategoryAttributes :one
SELECT category_attributes
FROM categories
WHERE category_id = $1
`

func (q *Queries) GetCategoryAttributes(ctx context.Context, categoryID int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, getCategoryAttributes, categoryID)
	var category_attributes []byte
	err := row.Scan(&category_attributes)
	return category_attributes, err
}

const getCategoryChildren = `-- name: GetCategoryChildren :many
SELECT category_id, slug, title, description, created_at, updated_at
FROM categories
WHERE shop_id = $1 AND parent_id = $2
`

type GetCategoryChildrenParams struct {
	ShopID   int64
	ParentID pgtype.Int8
}

type GetCategoryChildrenRow struct {
	CategoryID  int64
	Slug        string
	Title       string
	Description pgtype.Text
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

func (q *Queries) GetCategoryChildren(ctx context.Context, arg GetCategoryChildrenParams) ([]GetCategoryChildrenRow, error) {
	rows, err := q.db.Query(ctx, getCategoryChildren, arg.ShopID, arg.ParentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoryChildrenRow
	for rows.Next() {
		var i GetCategoryChildrenRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.Slug,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET 
    title = COALESCE($1, title),
    description = COALESCE($2, description),
    parent_id = COALESCE($3, parent_id)
WHERE category_id = $4
RETURNING category_id, slug, title, description, parent_id, created_at, updated_at, shop_id, category_attributes
`

type UpdateCategoryParams struct {
	Title       pgtype.Text
	Description pgtype.Text
	ParentID    pgtype.Int8
	CategoryID  int64
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.Title,
		arg.Description,
		arg.ParentID,
		arg.CategoryID,
	)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShopID,
		&i.CategoryAttributes,
	)
	return i, err
}
