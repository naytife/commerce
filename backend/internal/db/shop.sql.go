// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: shop.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createShop = `-- name: CreateShop :one
INSERT INTO shops (owner_id, title, subdomain, email, currency_code, about, status, address, phone_number, seo_description, seo_keywords, seo_title, current_template)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING shop_id, owner_id, title, subdomain, email, currency_code, status, about, address, phone_number, whatsapp_phone_number, whatsapp_link, facebook_link, instagram_link, seo_description, seo_keywords, seo_title, current_template, last_deployment_id, last_data_update_at, updated_at, created_at
`

type CreateShopParams struct {
	OwnerID         uuid.UUID `json:"owner_id"`
	Title           string    `json:"title"`
	Subdomain       string    `json:"subdomain"`
	Email           string    `json:"email"`
	CurrencyCode    string    `json:"currency_code"`
	About           *string   `json:"about"`
	Status          string    `json:"status"`
	Address         *string   `json:"address"`
	PhoneNumber     *string   `json:"phone_number"`
	SeoDescription  *string   `json:"seo_description"`
	SeoKeywords     []string  `json:"seo_keywords"`
	SeoTitle        *string   `json:"seo_title"`
	CurrentTemplate *string   `json:"current_template"`
}

func (q *Queries) CreateShop(ctx context.Context, arg CreateShopParams) (Shop, error) {
	row := q.db.QueryRow(ctx, createShop,
		arg.OwnerID,
		arg.Title,
		arg.Subdomain,
		arg.Email,
		arg.CurrencyCode,
		arg.About,
		arg.Status,
		arg.Address,
		arg.PhoneNumber,
		arg.SeoDescription,
		arg.SeoKeywords,
		arg.SeoTitle,
		arg.CurrentTemplate,
	)
	var i Shop
	err := row.Scan(
		&i.ShopID,
		&i.OwnerID,
		&i.Title,
		&i.Subdomain,
		&i.Email,
		&i.CurrencyCode,
		&i.Status,
		&i.About,
		&i.Address,
		&i.PhoneNumber,
		&i.WhatsappPhoneNumber,
		&i.WhatsappLink,
		&i.FacebookLink,
		&i.InstagramLink,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
		&i.CurrentTemplate,
		&i.LastDeploymentID,
		&i.LastDataUpdateAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createShopImages = `-- name: CreateShopImages :one
INSERT INTO shop_images (
    favicon_url, 
    logo_url, 
    logo_url_dark, 
    banner_url, 
    banner_url_dark, 
    cover_image_url, 
    cover_image_url_dark,
    shop_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING shop_image_id, favicon_url, logo_url, logo_url_dark, banner_url, banner_url_dark, cover_image_url, cover_image_url_dark, shop_id
`

type CreateShopImagesParams struct {
	FaviconUrl        *string `json:"favicon_url"`
	LogoUrl           *string `json:"logo_url"`
	LogoUrlDark       *string `json:"logo_url_dark"`
	BannerUrl         *string `json:"banner_url"`
	BannerUrlDark     *string `json:"banner_url_dark"`
	CoverImageUrl     *string `json:"cover_image_url"`
	CoverImageUrlDark *string `json:"cover_image_url_dark"`
	ShopID            int64   `json:"shop_id"`
}

func (q *Queries) CreateShopImages(ctx context.Context, arg CreateShopImagesParams) (ShopImage, error) {
	row := q.db.QueryRow(ctx, createShopImages,
		arg.FaviconUrl,
		arg.LogoUrl,
		arg.LogoUrlDark,
		arg.BannerUrl,
		arg.BannerUrlDark,
		arg.CoverImageUrl,
		arg.CoverImageUrlDark,
		arg.ShopID,
	)
	var i ShopImage
	err := row.Scan(
		&i.ShopImageID,
		&i.FaviconUrl,
		&i.LogoUrl,
		&i.LogoUrlDark,
		&i.BannerUrl,
		&i.BannerUrlDark,
		&i.CoverImageUrl,
		&i.CoverImageUrlDark,
		&i.ShopID,
	)
	return i, err
}

const deleteShop = `-- name: DeleteShop :exec
DELETE FROM shops
WHERE shop_id = $1
`

func (q *Queries) DeleteShop(ctx context.Context, shopID int64) error {
	_, err := q.db.Exec(ctx, deleteShop, shopID)
	return err
}

const getShop = `-- name: GetShop :one
SELECT shop_id, owner_id, title, subdomain, email, currency_code, status, about, address, phone_number, whatsapp_phone_number, whatsapp_link, facebook_link, instagram_link, seo_description, seo_keywords, seo_title, current_template, last_deployment_id, last_data_update_at, updated_at, created_at FROM shops
WHERE shop_id = $1
`

func (q *Queries) GetShop(ctx context.Context, shopID int64) (Shop, error) {
	row := q.db.QueryRow(ctx, getShop, shopID)
	var i Shop
	err := row.Scan(
		&i.ShopID,
		&i.OwnerID,
		&i.Title,
		&i.Subdomain,
		&i.Email,
		&i.CurrencyCode,
		&i.Status,
		&i.About,
		&i.Address,
		&i.PhoneNumber,
		&i.WhatsappPhoneNumber,
		&i.WhatsappLink,
		&i.FacebookLink,
		&i.InstagramLink,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
		&i.CurrentTemplate,
		&i.LastDeploymentID,
		&i.LastDataUpdateAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getShopBySubDomain = `-- name: GetShopBySubDomain :one
SELECT shop_id, owner_id, title, subdomain, email, currency_code, status, about, address, phone_number, whatsapp_phone_number, whatsapp_link, facebook_link, instagram_link, seo_description, seo_keywords, seo_title, current_template, last_deployment_id, last_data_update_at, updated_at, created_at FROM shops
WHERE subdomain = $1
`

func (q *Queries) GetShopBySubDomain(ctx context.Context, subdomain string) (Shop, error) {
	row := q.db.QueryRow(ctx, getShopBySubDomain, subdomain)
	var i Shop
	err := row.Scan(
		&i.ShopID,
		&i.OwnerID,
		&i.Title,
		&i.Subdomain,
		&i.Email,
		&i.CurrencyCode,
		&i.Status,
		&i.About,
		&i.Address,
		&i.PhoneNumber,
		&i.WhatsappPhoneNumber,
		&i.WhatsappLink,
		&i.FacebookLink,
		&i.InstagramLink,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
		&i.CurrentTemplate,
		&i.LastDeploymentID,
		&i.LastDataUpdateAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getShopIDBySubDomain = `-- name: GetShopIDBySubDomain :one
SELECT shop_id FROM shops
WHERE subdomain = $1
`

func (q *Queries) GetShopIDBySubDomain(ctx context.Context, subdomain string) (int64, error) {
	row := q.db.QueryRow(ctx, getShopIDBySubDomain, subdomain)
	var shop_id int64
	err := row.Scan(&shop_id)
	return shop_id, err
}

const getShopImages = `-- name: GetShopImages :one
SELECT shop_image_id, favicon_url, logo_url, logo_url_dark, banner_url, banner_url_dark, cover_image_url, cover_image_url_dark, shop_id FROM shop_images
WHERE shop_id = $1
`

func (q *Queries) GetShopImages(ctx context.Context, shopID int64) (ShopImage, error) {
	row := q.db.QueryRow(ctx, getShopImages, shopID)
	var i ShopImage
	err := row.Scan(
		&i.ShopImageID,
		&i.FaviconUrl,
		&i.LogoUrl,
		&i.LogoUrlDark,
		&i.BannerUrl,
		&i.BannerUrlDark,
		&i.CoverImageUrl,
		&i.CoverImageUrlDark,
		&i.ShopID,
	)
	return i, err
}

const getShopsByOwner = `-- name: GetShopsByOwner :many
SELECT shop_id, owner_id, title, subdomain, email, currency_code, status, about, address, phone_number, whatsapp_phone_number, whatsapp_link, facebook_link, instagram_link, seo_description, seo_keywords, seo_title, current_template, last_deployment_id, last_data_update_at, updated_at, created_at FROM shops
WHERE owner_id = $1
`

func (q *Queries) GetShopsByOwner(ctx context.Context, ownerID uuid.UUID) ([]Shop, error) {
	rows, err := q.db.Query(ctx, getShopsByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shop
	for rows.Next() {
		var i Shop
		if err := rows.Scan(
			&i.ShopID,
			&i.OwnerID,
			&i.Title,
			&i.Subdomain,
			&i.Email,
			&i.CurrencyCode,
			&i.Status,
			&i.About,
			&i.Address,
			&i.PhoneNumber,
			&i.WhatsappPhoneNumber,
			&i.WhatsappLink,
			&i.FacebookLink,
			&i.InstagramLink,
			&i.SeoDescription,
			&i.SeoKeywords,
			&i.SeoTitle,
			&i.CurrentTemplate,
			&i.LastDeploymentID,
			&i.LastDataUpdateAt,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShop = `-- name: UpdateShop :one
UPDATE shops
SET 
    title = COALESCE($1, title),
    currency_code = COALESCE($2, currency_code),
    about = COALESCE($3, about),
    status = COALESCE($4, status),
    phone_number = COALESCE($5, phone_number),
    whatsapp_link = COALESCE($6, whatsapp_link),
    whatsapp_phone_number = COALESCE($7, whatsapp_phone_number),
    facebook_link = COALESCE($8, facebook_link),
    instagram_link = COALESCE($9, instagram_link),
    seo_description = COALESCE($10, seo_description),
    seo_keywords = COALESCE($11, seo_keywords),
    seo_title = COALESCE($12, seo_title),
    address = COALESCE($13, address),
    email = COALESCE($14, email),
    current_template = COALESCE($15, current_template),
    updated_at = NOW()
WHERE shop_id = $16
RETURNING shop_id, owner_id, title, subdomain, email, currency_code, status, about, address, phone_number, whatsapp_phone_number, whatsapp_link, facebook_link, instagram_link, seo_description, seo_keywords, seo_title, current_template, last_deployment_id, last_data_update_at, updated_at, created_at
`

type UpdateShopParams struct {
	Title               *string  `json:"title"`
	CurrencyCode        *string  `json:"currency_code"`
	About               *string  `json:"about"`
	Status              *string  `json:"status"`
	PhoneNumber         *string  `json:"phone_number"`
	WhatsappLink        *string  `json:"whatsapp_link"`
	WhatsappPhoneNumber *string  `json:"whatsapp_phone_number"`
	FacebookLink        *string  `json:"facebook_link"`
	InstagramLink       *string  `json:"instagram_link"`
	SeoDescription      *string  `json:"seo_description"`
	SeoKeywords         []string `json:"seo_keywords"`
	SeoTitle            *string  `json:"seo_title"`
	Address             *string  `json:"address"`
	Email               *string  `json:"email"`
	CurrentTemplate     *string  `json:"current_template"`
	ShopID              int64    `json:"shop_id"`
}

func (q *Queries) UpdateShop(ctx context.Context, arg UpdateShopParams) (Shop, error) {
	row := q.db.QueryRow(ctx, updateShop,
		arg.Title,
		arg.CurrencyCode,
		arg.About,
		arg.Status,
		arg.PhoneNumber,
		arg.WhatsappLink,
		arg.WhatsappPhoneNumber,
		arg.FacebookLink,
		arg.InstagramLink,
		arg.SeoDescription,
		arg.SeoKeywords,
		arg.SeoTitle,
		arg.Address,
		arg.Email,
		arg.CurrentTemplate,
		arg.ShopID,
	)
	var i Shop
	err := row.Scan(
		&i.ShopID,
		&i.OwnerID,
		&i.Title,
		&i.Subdomain,
		&i.Email,
		&i.CurrencyCode,
		&i.Status,
		&i.About,
		&i.Address,
		&i.PhoneNumber,
		&i.WhatsappPhoneNumber,
		&i.WhatsappLink,
		&i.FacebookLink,
		&i.InstagramLink,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
		&i.CurrentTemplate,
		&i.LastDeploymentID,
		&i.LastDataUpdateAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateShopImages = `-- name: UpdateShopImages :one
UPDATE shop_images
SET 
    favicon_url = COALESCE($1, favicon_url),
    logo_url = COALESCE($2, logo_url),
    logo_url_dark = COALESCE($3, logo_url_dark),
    banner_url = COALESCE($4, banner_url),
    banner_url_dark = COALESCE($5, banner_url_dark),
    cover_image_url = COALESCE($6, cover_image_url),
    cover_image_url_dark = COALESCE($7, cover_image_url_dark)
WHERE shop_id = $8
RETURNING shop_image_id, favicon_url, logo_url, logo_url_dark, banner_url, banner_url_dark, cover_image_url, cover_image_url_dark, shop_id
`

type UpdateShopImagesParams struct {
	FaviconUrl        *string `json:"favicon_url"`
	LogoUrl           *string `json:"logo_url"`
	LogoUrlDark       *string `json:"logo_url_dark"`
	BannerUrl         *string `json:"banner_url"`
	BannerUrlDark     *string `json:"banner_url_dark"`
	CoverImageUrl     *string `json:"cover_image_url"`
	CoverImageUrlDark *string `json:"cover_image_url_dark"`
	ShopID            int64   `json:"shop_id"`
}

func (q *Queries) UpdateShopImages(ctx context.Context, arg UpdateShopImagesParams) (ShopImage, error) {
	row := q.db.QueryRow(ctx, updateShopImages,
		arg.FaviconUrl,
		arg.LogoUrl,
		arg.LogoUrlDark,
		arg.BannerUrl,
		arg.BannerUrlDark,
		arg.CoverImageUrl,
		arg.CoverImageUrlDark,
		arg.ShopID,
	)
	var i ShopImage
	err := row.Scan(
		&i.ShopImageID,
		&i.FaviconUrl,
		&i.LogoUrl,
		&i.LogoUrlDark,
		&i.BannerUrl,
		&i.BannerUrlDark,
		&i.CoverImageUrl,
		&i.CoverImageUrlDark,
		&i.ShopID,
	)
	return i, err
}
