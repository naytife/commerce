// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: shop_payment_methods.sql

package db

import (
	"context"
)

const deleteShopPaymentMethod = `-- name: DeleteShopPaymentMethod :exec
DELETE FROM shop_payment_methods
WHERE shop_id = $1 AND method_type = $2
`

type DeleteShopPaymentMethodParams struct {
	ShopID     int64             `json:"shop_id"`
	MethodType PaymentMethodType `json:"method_type"`
}

func (q *Queries) DeleteShopPaymentMethod(ctx context.Context, arg DeleteShopPaymentMethodParams) error {
	_, err := q.db.Exec(ctx, deleteShopPaymentMethod, arg.ShopID, arg.MethodType)
	return err
}

const getShopPaymentMethod = `-- name: GetShopPaymentMethod :one
SELECT payment_method_id, shop_id, method_type, is_enabled, attributes, created_at, updated_at FROM shop_payment_methods
WHERE shop_id = $1 AND method_type = $2
`

type GetShopPaymentMethodParams struct {
	ShopID     int64             `json:"shop_id"`
	MethodType PaymentMethodType `json:"method_type"`
}

func (q *Queries) GetShopPaymentMethod(ctx context.Context, arg GetShopPaymentMethodParams) (ShopPaymentMethod, error) {
	row := q.db.QueryRow(ctx, getShopPaymentMethod, arg.ShopID, arg.MethodType)
	var i ShopPaymentMethod
	err := row.Scan(
		&i.PaymentMethodID,
		&i.ShopID,
		&i.MethodType,
		&i.IsEnabled,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShopPaymentMethods = `-- name: GetShopPaymentMethods :many
SELECT payment_method_id, shop_id, method_type, is_enabled, attributes, created_at, updated_at FROM shop_payment_methods
WHERE shop_id = $1
ORDER BY method_type
`

func (q *Queries) GetShopPaymentMethods(ctx context.Context, shopID int64) ([]ShopPaymentMethod, error) {
	rows, err := q.db.Query(ctx, getShopPaymentMethods, shopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShopPaymentMethod
	for rows.Next() {
		var i ShopPaymentMethod
		if err := rows.Scan(
			&i.PaymentMethodID,
			&i.ShopID,
			&i.MethodType,
			&i.IsEnabled,
			&i.Attributes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShopPaymentMethodStatus = `-- name: UpdateShopPaymentMethodStatus :one
UPDATE shop_payment_methods
SET is_enabled = $3, updated_at = NOW()
WHERE shop_id = $1 AND method_type = $2
RETURNING payment_method_id, shop_id, method_type, is_enabled, attributes, created_at, updated_at
`

type UpdateShopPaymentMethodStatusParams struct {
	ShopID     int64             `json:"shop_id"`
	MethodType PaymentMethodType `json:"method_type"`
	IsEnabled  bool              `json:"is_enabled"`
}

func (q *Queries) UpdateShopPaymentMethodStatus(ctx context.Context, arg UpdateShopPaymentMethodStatusParams) (ShopPaymentMethod, error) {
	row := q.db.QueryRow(ctx, updateShopPaymentMethodStatus, arg.ShopID, arg.MethodType, arg.IsEnabled)
	var i ShopPaymentMethod
	err := row.Scan(
		&i.PaymentMethodID,
		&i.ShopID,
		&i.MethodType,
		&i.IsEnabled,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertShopPaymentMethod = `-- name: UpsertShopPaymentMethod :one
INSERT INTO shop_payment_methods (shop_id, method_type, is_enabled, attributes)
VALUES ($1, $2, $3, $4)
ON CONFLICT (shop_id, method_type)
DO UPDATE SET
    is_enabled = EXCLUDED.is_enabled,
    attributes = EXCLUDED.attributes,
    updated_at = NOW()
RETURNING payment_method_id, shop_id, method_type, is_enabled, attributes, created_at, updated_at
`

type UpsertShopPaymentMethodParams struct {
	ShopID     int64             `json:"shop_id"`
	MethodType PaymentMethodType `json:"method_type"`
	IsEnabled  bool              `json:"is_enabled"`
	Attributes []byte            `json:"attributes"`
}

func (q *Queries) UpsertShopPaymentMethod(ctx context.Context, arg UpsertShopPaymentMethodParams) (ShopPaymentMethod, error) {
	row := q.db.QueryRow(ctx, upsertShopPaymentMethod,
		arg.ShopID,
		arg.MethodType,
		arg.IsEnabled,
		arg.Attributes,
	)
	var i ShopPaymentMethod
	err := row.Scan(
		&i.PaymentMethodID,
		&i.ShopID,
		&i.MethodType,
		&i.IsEnabled,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
