// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AttributeAppliesTo string

const (
	AttributeAppliesToProduct          AttributeAppliesTo = "Product"
	AttributeAppliesToProductVariation AttributeAppliesTo = "ProductVariation"
)

func (e *AttributeAppliesTo) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AttributeAppliesTo(s)
	case string:
		*e = AttributeAppliesTo(s)
	default:
		return fmt.Errorf("unsupported scan type for AttributeAppliesTo: %T", src)
	}
	return nil
}

type NullAttributeAppliesTo struct {
	AttributeAppliesTo AttributeAppliesTo `json:"attribute_applies_to"`
	Valid              bool               `json:"valid"` // Valid is true if AttributeAppliesTo is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAttributeAppliesTo) Scan(value interface{}) error {
	if value == nil {
		ns.AttributeAppliesTo, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AttributeAppliesTo.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAttributeAppliesTo) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AttributeAppliesTo), nil
}

type AttributeDataType string

const (
	AttributeDataTypeText   AttributeDataType = "Text"
	AttributeDataTypeNumber AttributeDataType = "Number"
	AttributeDataTypeDate   AttributeDataType = "Date"
	AttributeDataTypeOption AttributeDataType = "Option"
)

func (e *AttributeDataType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AttributeDataType(s)
	case string:
		*e = AttributeDataType(s)
	default:
		return fmt.Errorf("unsupported scan type for AttributeDataType: %T", src)
	}
	return nil
}

type NullAttributeDataType struct {
	AttributeDataType AttributeDataType `json:"attribute_data_type"`
	Valid             bool              `json:"valid"` // Valid is true if AttributeDataType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAttributeDataType) Scan(value interface{}) error {
	if value == nil {
		ns.AttributeDataType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AttributeDataType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAttributeDataType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AttributeDataType), nil
}

type AttributeUnit string

const (
	AttributeUnitKG   AttributeUnit = "KG"
	AttributeUnitGB   AttributeUnit = "GB"
	AttributeUnitINCH AttributeUnit = "INCH"
)

func (e *AttributeUnit) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AttributeUnit(s)
	case string:
		*e = AttributeUnit(s)
	default:
		return fmt.Errorf("unsupported scan type for AttributeUnit: %T", src)
	}
	return nil
}

type NullAttributeUnit struct {
	AttributeUnit AttributeUnit `json:"attribute_unit"`
	Valid         bool          `json:"valid"` // Valid is true if AttributeUnit is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAttributeUnit) Scan(value interface{}) error {
	if value == nil {
		ns.AttributeUnit, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AttributeUnit.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAttributeUnit) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AttributeUnit), nil
}

type ProductStatus string

const (
	ProductStatusDRAFT     ProductStatus = "DRAFT"
	ProductStatusPUBLISHED ProductStatus = "PUBLISHED"
	ProductStatusARCHIVED  ProductStatus = "ARCHIVED"
)

func (e *ProductStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductStatus(s)
	case string:
		*e = ProductStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductStatus: %T", src)
	}
	return nil
}

type NullProductStatus struct {
	ProductStatus ProductStatus `json:"product_status"`
	Valid         bool          `json:"valid"` // Valid is true if ProductStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProductStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductStatus), nil
}

type Attribute struct {
	AttributeID   int64              `json:"attribute_id"`
	Title         string             `json:"title"`
	DataType      AttributeDataType  `json:"data_type"`
	Unit          NullAttributeUnit  `json:"unit"`
	Required      bool               `json:"required"`
	AppliesTo     AttributeAppliesTo `json:"applies_to"`
	ShopID        int64              `json:"shop_id"`
	ProductTypeID int64              `json:"product_type_id"`
}

type AttributeOption struct {
	AttributeOptionID int64  `json:"attribute_option_id"`
	Value             string `json:"value"`
	ShopID            int64  `json:"shop_id"`
	AttributeID       int64  `json:"attribute_id"`
}

type Category struct {
	CategoryID  int64   `json:"category_id"`
	Slug        string  `json:"slug"`
	Title       string  `json:"title"`
	Description *string `json:"description"`
	ParentID    *int64  `json:"parent_id"`
	ShopID      int64   `json:"shop_id"`
}

type Order struct {
	OrderID    int64              `json:"order_id"`
	Status     string             `json:"status"`
	TotalPrice pgtype.Numeric     `json:"total_price"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	UserID     uuid.UUID          `json:"user_id"`
}

type OrderItem struct {
	OrderItemID        int64              `json:"order_item_id"`
	Quantity           int64              `json:"quantity"`
	Price              pgtype.Numeric     `json:"price"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	ProductVariationID int64              `json:"product_variation_id"`
	OrderID            int64              `json:"order_id"`
}

type Product struct {
	ProductID     int64              `json:"product_id"`
	Title         string             `json:"title"`
	Description   string             `json:"description"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	ProductTypeID int64              `json:"product_type_id"`
	CategoryID    *int64             `json:"category_id"`
	ShopID        int64              `json:"shop_id"`
	Status        ProductStatus      `json:"status"`
}

type ProductAttributeValue struct {
	ProductAttributeValueID int64   `json:"product_attribute_value_id"`
	Value                   *string `json:"value"`
	AttributeOptionID       *int64  `json:"attribute_option_id"`
	ProductID               int64   `json:"product_id"`
	AttributeID             int64   `json:"attribute_id"`
	ShopID                  int64   `json:"shop_id"`
}

type ProductImage struct {
	ProductImageID int64  `json:"product_image_id"`
	Url            string `json:"url"`
	Alt            string `json:"alt"`
	ProductID      int64  `json:"product_id"`
	ShopID         int64  `json:"shop_id"`
}

type ProductType struct {
	ProductTypeID int64  `json:"product_type_id"`
	Title         string `json:"title"`
	Shippable     bool   `json:"shippable"`
	Digital       bool   `json:"digital"`
	ShopID        int64  `json:"shop_id"`
}

type ProductVariation struct {
	ProductVariationID int64              `json:"product_variation_id"`
	Sku                string             `json:"sku"`
	Slug               string             `json:"slug"`
	Description        string             `json:"description"`
	Price              pgtype.Numeric     `json:"price"`
	AvailableQuantity  int64              `json:"available_quantity"`
	SeoDescription     *string            `json:"seo_description"`
	SeoKeywords        []string           `json:"seo_keywords"`
	SeoTitle           *string            `json:"seo_title"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	ProductID          int64              `json:"product_id"`
	ShopID             int64              `json:"shop_id"`
}

type ProductVariationAttributeValue struct {
	ProductVariationAttributeValueID int64   `json:"product_variation_attribute_value_id"`
	Value                            *string `json:"value"`
	AttributeOptionID                *int64  `json:"attribute_option_id"`
	ProductVariationID               int64   `json:"product_variation_id"`
	AttributeID                      int64   `json:"attribute_id"`
	ShopID                           int64   `json:"shop_id"`
}

type Shop struct {
	ShopID              int64              `json:"shop_id"`
	OwnerID             uuid.UUID          `json:"owner_id"`
	Title               string             `json:"title"`
	Domain              string             `json:"domain"`
	Email               string             `json:"email"`
	CurrencyCode        string             `json:"currency_code"`
	Status              string             `json:"status"`
	About               *string            `json:"about"`
	Address             *string            `json:"address"`
	PhoneNumber         *string            `json:"phone_number"`
	WhatsappPhoneNumber *string            `json:"whatsapp_phone_number"`
	WhatsappLink        *string            `json:"whatsapp_link"`
	FacebookLink        *string            `json:"facebook_link"`
	InstagramLink       *string            `json:"instagram_link"`
	SeoDescription      *string            `json:"seo_description"`
	SeoKeywords         []string           `json:"seo_keywords"`
	SeoTitle            *string            `json:"seo_title"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	Subdomain           string             `json:"subdomain"`
}

type ShopImage struct {
	ShopImageID   int64   `json:"shop_image_id"`
	FaviconUrl    *string `json:"favicon_url"`
	LogoUrl       *string `json:"logo_url"`
	BannerUrl     *string `json:"banner_url"`
	CoverImageUrl *string `json:"cover_image_url"`
	ShopID        int64   `json:"shop_id"`
}

type ShoppingCart struct {
	ShoppingCartID int64     `json:"shopping_cart_id"`
	UserID         uuid.UUID `json:"user_id"`
}

type ShoppingCartItem struct {
	ShoppingCartItemID int64              `json:"shopping_cart_item_id"`
	Quantity           int64              `json:"quantity"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	ProductVariationID int64              `json:"product_variation_id"`
	ShoppingCartID     int64              `json:"shopping_cart_id"`
}

type User struct {
	UserID         uuid.UUID        `json:"user_id"`
	Sub            *string          `json:"sub"`
	Email          *string          `json:"email"`
	Provider       *string          `json:"provider"`
	ProviderID     *string          `json:"provider_id"`
	Name           *string          `json:"name"`
	Locale         *string          `json:"locale"`
	ProfilePicture *string          `json:"profile_picture"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	LastLogin      pgtype.Timestamp `json:"last_login"`
	VerifiedEmail  *bool            `json:"verified_email"`
}
