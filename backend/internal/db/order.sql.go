// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    status, amount, discount, shipping_cost, tax,
    shipping_address, payment_method, payment_status,
    shipping_method, shipping_status, transaction_id,
    username, shop_customer_id, shop_id, customer_name,
    customer_email, customer_phone
) VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, $8,
    $9, $10, $11,
    $12, $13, $14, $15,
    $16, $17
)
RETURNING order_id, status, amount, discount, shipping_cost, tax, shipping_address, payment_method, payment_status, shipping_method, shipping_status, transaction_id, username, created_at, updated_at, shop_customer_id, shop_id, customer_name, customer_email, customer_phone
`

type CreateOrderParams struct {
	Status          OrderStatusType    `json:"status"`
	Amount          pgtype.Numeric     `json:"amount"`
	Discount        pgtype.Numeric     `json:"discount"`
	ShippingCost    pgtype.Numeric     `json:"shipping_cost"`
	Tax             pgtype.Numeric     `json:"tax"`
	ShippingAddress string             `json:"shipping_address"`
	PaymentMethod   PaymentMethodType  `json:"payment_method"`
	PaymentStatus   PaymentStatusType  `json:"payment_status"`
	ShippingMethod  string             `json:"shipping_method"`
	ShippingStatus  ShippingStatusType `json:"shipping_status"`
	TransactionID   *string            `json:"transaction_id"`
	Username        string             `json:"username"`
	ShopCustomerID  pgtype.UUID        `json:"shop_customer_id"`
	ShopID          int64              `json:"shop_id"`
	CustomerName    string             `json:"customer_name"`
	CustomerEmail   *string            `json:"customer_email"`
	CustomerPhone   *string            `json:"customer_phone"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.Status,
		arg.Amount,
		arg.Discount,
		arg.ShippingCost,
		arg.Tax,
		arg.ShippingAddress,
		arg.PaymentMethod,
		arg.PaymentStatus,
		arg.ShippingMethod,
		arg.ShippingStatus,
		arg.TransactionID,
		arg.Username,
		arg.ShopCustomerID,
		arg.ShopID,
		arg.CustomerName,
		arg.CustomerEmail,
		arg.CustomerPhone,
	)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.Status,
		&i.Amount,
		&i.Discount,
		&i.ShippingCost,
		&i.Tax,
		&i.ShippingAddress,
		&i.PaymentMethod,
		&i.PaymentStatus,
		&i.ShippingMethod,
		&i.ShippingStatus,
		&i.TransactionID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShopCustomerID,
		&i.ShopID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
    quantity, price, product_variation_id, order_id, shop_id
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING order_item_id, quantity, price, created_at, updated_at, product_variation_id, order_id, shop_id
`

type CreateOrderItemParams struct {
	Quantity           int64          `json:"quantity"`
	Price              pgtype.Numeric `json:"price"`
	ProductVariationID int64          `json:"product_variation_id"`
	OrderID            int64          `json:"order_id"`
	ShopID             int64          `json:"shop_id"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.Quantity,
		arg.Price,
		arg.ProductVariationID,
		arg.OrderID,
		arg.ShopID,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductVariationID,
		&i.OrderID,
		&i.ShopID,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE order_id = $1 AND shop_id = $2
`

type DeleteOrderParams struct {
	OrderID int64 `json:"order_id"`
	ShopID  int64 `json:"shop_id"`
}

func (q *Queries) DeleteOrder(ctx context.Context, arg DeleteOrderParams) error {
	_, err := q.db.Exec(ctx, deleteOrder, arg.OrderID, arg.ShopID)
	return err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE order_item_id = $1 AND shop_id = $2
`

type DeleteOrderItemParams struct {
	OrderItemID int64 `json:"order_item_id"`
	ShopID      int64 `json:"shop_id"`
}

func (q *Queries) DeleteOrderItem(ctx context.Context, arg DeleteOrderItemParams) error {
	_, err := q.db.Exec(ctx, deleteOrderItem, arg.OrderItemID, arg.ShopID)
	return err
}

const deleteOrderItemsByOrder = `-- name: DeleteOrderItemsByOrder :exec
DELETE FROM order_items
WHERE order_id = $1 AND shop_id = $2
`

type DeleteOrderItemsByOrderParams struct {
	OrderID int64 `json:"order_id"`
	ShopID  int64 `json:"shop_id"`
}

func (q *Queries) DeleteOrderItemsByOrder(ctx context.Context, arg DeleteOrderItemsByOrderParams) error {
	_, err := q.db.Exec(ctx, deleteOrderItemsByOrder, arg.OrderID, arg.ShopID)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT order_id, status, amount, discount, shipping_cost, tax, shipping_address, payment_method, payment_status, shipping_method, shipping_status, transaction_id, username, created_at, updated_at, shop_customer_id, shop_id, customer_name, customer_email, customer_phone FROM orders
WHERE order_id = $1 AND shop_id = $2
`

type GetOrderParams struct {
	OrderID int64 `json:"order_id"`
	ShopID  int64 `json:"shop_id"`
}

func (q *Queries) GetOrder(ctx context.Context, arg GetOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, arg.OrderID, arg.ShopID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.Status,
		&i.Amount,
		&i.Discount,
		&i.ShippingCost,
		&i.Tax,
		&i.ShippingAddress,
		&i.PaymentMethod,
		&i.PaymentStatus,
		&i.ShippingMethod,
		&i.ShippingStatus,
		&i.TransactionID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ShopCustomerID,
		&i.ShopID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
	)
	return i, err
}

const getOrderItemsByOrder = `-- name: GetOrderItemsByOrder :many
SELECT order_item_id, quantity, price, created_at, updated_at, product_variation_id, order_id, shop_id FROM order_items
WHERE order_id = $1 AND shop_id = $2
ORDER BY order_item_id
`

type GetOrderItemsByOrderParams struct {
	OrderID int64 `json:"order_id"`
	ShopID  int64 `json:"shop_id"`
}

func (q *Queries) GetOrderItemsByOrder(ctx context.Context, arg GetOrderItemsByOrderParams) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, getOrderItemsByOrder, arg.OrderID, arg.ShopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderItemID,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProductVariationID,
			&i.OrderID,
			&i.ShopID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT order_id, status, amount, discount, shipping_cost, tax, shipping_address, payment_method, payment_status, shipping_method, shipping_status, transaction_id, username, created_at, updated_at, shop_customer_id, shop_id, customer_name, customer_email, customer_phone FROM orders
WHERE shop_id = $1
ORDER BY order_id
LIMIT $2 OFFSET $3
`

type ListOrdersParams struct {
	ShopID int64 `json:"shop_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, arg.ShopID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.Status,
			&i.Amount,
			&i.Discount,
			&i.ShippingCost,
			&i.Tax,
			&i.ShippingAddress,
			&i.PaymentMethod,
			&i.PaymentStatus,
			&i.ShippingMethod,
			&i.ShippingStatus,
			&i.TransactionID,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ShopCustomerID,
			&i.ShopID,
			&i.CustomerName,
			&i.CustomerEmail,
			&i.CustomerPhone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET
    status = $1,
    amount = $2,
    discount = $3,
    shipping_cost = $4,
    tax = $5,
    shipping_address = $6,
    payment_method = $7,
    payment_status = $8,
    shipping_method = $9,
    shipping_status = $10,
    transaction_id = $11,
    username = $12,
    customer_name = $13,
    customer_email = $14,
    customer_phone = $15,
    updated_at = NOW()
WHERE order_id = $16 AND shop_id = $17
`

type UpdateOrderParams struct {
	Status          OrderStatusType    `json:"status"`
	Amount          pgtype.Numeric     `json:"amount"`
	Discount        pgtype.Numeric     `json:"discount"`
	ShippingCost    pgtype.Numeric     `json:"shipping_cost"`
	Tax             pgtype.Numeric     `json:"tax"`
	ShippingAddress string             `json:"shipping_address"`
	PaymentMethod   PaymentMethodType  `json:"payment_method"`
	PaymentStatus   PaymentStatusType  `json:"payment_status"`
	ShippingMethod  string             `json:"shipping_method"`
	ShippingStatus  ShippingStatusType `json:"shipping_status"`
	TransactionID   *string            `json:"transaction_id"`
	Username        string             `json:"username"`
	CustomerName    string             `json:"customer_name"`
	CustomerEmail   *string            `json:"customer_email"`
	CustomerPhone   *string            `json:"customer_phone"`
	OrderID         int64              `json:"order_id"`
	ShopID          int64              `json:"shop_id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder,
		arg.Status,
		arg.Amount,
		arg.Discount,
		arg.ShippingCost,
		arg.Tax,
		arg.ShippingAddress,
		arg.PaymentMethod,
		arg.PaymentStatus,
		arg.ShippingMethod,
		arg.ShippingStatus,
		arg.TransactionID,
		arg.Username,
		arg.CustomerName,
		arg.CustomerEmail,
		arg.CustomerPhone,
		arg.OrderID,
		arg.ShopID,
	)
	return err
}

const updateOrderItem = `-- name: UpdateOrderItem :exec
UPDATE order_items
SET
    quantity = $1,
    price = $2,
    updated_at = NOW()
WHERE order_item_id = $3 AND shop_id = $4
RETURNING order_item_id, quantity, price, created_at, updated_at, product_variation_id, order_id, shop_id
`

type UpdateOrderItemParams struct {
	Quantity    int64          `json:"quantity"`
	Price       pgtype.Numeric `json:"price"`
	OrderItemID int64          `json:"order_item_id"`
	ShopID      int64          `json:"shop_id"`
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) error {
	_, err := q.db.Exec(ctx, updateOrderItem,
		arg.Quantity,
		arg.Price,
		arg.OrderItemID,
		arg.ShopID,
	)
	return err
}
