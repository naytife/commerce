// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/db/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	db "github.com/petrejonn/naytife/internal/db"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddVariantStock mocks base method.
func (m *MockRepository) AddVariantStock(ctx context.Context, arg db.AddVariantStockParams) (db.ProductVariation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVariantStock", ctx, arg)
	ret0, _ := ret[0].(db.ProductVariation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVariantStock indicates an expected call of AddVariantStock.
func (mr *MockRepositoryMockRecorder) AddVariantStock(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVariantStock", reflect.TypeOf((*MockRepository)(nil).AddVariantStock), ctx, arg)
}

// BatchDeleteAttributeOptions mocks base method.
func (m *MockRepository) BatchDeleteAttributeOptions(ctx context.Context, arg []db.BatchDeleteAttributeOptionsParams) *db.BatchDeleteAttributeOptionsBatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteAttributeOptions", ctx, arg)
	ret0, _ := ret[0].(*db.BatchDeleteAttributeOptionsBatchResults)
	return ret0
}

// BatchDeleteAttributeOptions indicates an expected call of BatchDeleteAttributeOptions.
func (mr *MockRepositoryMockRecorder) BatchDeleteAttributeOptions(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteAttributeOptions", reflect.TypeOf((*MockRepository)(nil).BatchDeleteAttributeOptions), ctx, arg)
}

// BatchUpsertAttributeOption mocks base method.
func (m *MockRepository) BatchUpsertAttributeOption(ctx context.Context, arg []db.BatchUpsertAttributeOptionParams) *db.BatchUpsertAttributeOptionBatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpsertAttributeOption", ctx, arg)
	ret0, _ := ret[0].(*db.BatchUpsertAttributeOptionBatchResults)
	return ret0
}

// BatchUpsertAttributeOption indicates an expected call of BatchUpsertAttributeOption.
func (mr *MockRepositoryMockRecorder) BatchUpsertAttributeOption(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpsertAttributeOption", reflect.TypeOf((*MockRepository)(nil).BatchUpsertAttributeOption), ctx, arg)
}

// CreateAttribute mocks base method.
func (m *MockRepository) CreateAttribute(ctx context.Context, arg db.CreateAttributeParams) (db.Attribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttribute", ctx, arg)
	ret0, _ := ret[0].(db.Attribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttribute indicates an expected call of CreateAttribute.
func (mr *MockRepositoryMockRecorder) CreateAttribute(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttribute", reflect.TypeOf((*MockRepository)(nil).CreateAttribute), ctx, arg)
}

// CreateCategory mocks base method.
func (m *MockRepository) CreateCategory(ctx context.Context, arg db.CreateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, arg)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockRepositoryMockRecorder) CreateCategory(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockRepository)(nil).CreateCategory), ctx, arg)
}

// CreateOrder mocks base method.
func (m *MockRepository) CreateOrder(ctx context.Context, arg db.CreateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, arg)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryMockRecorder) CreateOrder(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepository)(nil).CreateOrder), ctx, arg)
}

// CreateOrderItem mocks base method.
func (m *MockRepository) CreateOrderItem(ctx context.Context, arg db.CreateOrderItemParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", ctx, arg)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockRepositoryMockRecorder) CreateOrderItem(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockRepository)(nil).CreateOrderItem), ctx, arg)
}

// CreateProduct mocks base method.
func (m *MockRepository) CreateProduct(ctx context.Context, arg db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockRepositoryMockRecorder) CreateProduct(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockRepository)(nil).CreateProduct), ctx, arg)
}

// CreateProductImage mocks base method.
func (m *MockRepository) CreateProductImage(ctx context.Context, arg db.CreateProductImageParams) (db.ProductImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductImage", ctx, arg)
	ret0, _ := ret[0].(db.ProductImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductImage indicates an expected call of CreateProductImage.
func (mr *MockRepositoryMockRecorder) CreateProductImage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductImage", reflect.TypeOf((*MockRepository)(nil).CreateProductImage), ctx, arg)
}

// CreateProductType mocks base method.
func (m *MockRepository) CreateProductType(ctx context.Context, arg db.CreateProductTypeParams) (db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductType", ctx, arg)
	ret0, _ := ret[0].(db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductType indicates an expected call of CreateProductType.
func (mr *MockRepositoryMockRecorder) CreateProductType(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductType", reflect.TypeOf((*MockRepository)(nil).CreateProductType), ctx, arg)
}

// CreateShop mocks base method.
func (m *MockRepository) CreateShop(ctx context.Context, shopArg db.CreateShopParams) (db.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShop", ctx, shopArg)
	ret0, _ := ret[0].(db.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShop indicates an expected call of CreateShop.
func (mr *MockRepositoryMockRecorder) CreateShop(ctx, shopArg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShop", reflect.TypeOf((*MockRepository)(nil).CreateShop), ctx, shopArg)
}

// CreateStockMovement mocks base method.
func (m *MockRepository) CreateStockMovement(ctx context.Context, arg db.CreateStockMovementParams) (db.StockMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStockMovement", ctx, arg)
	ret0, _ := ret[0].(db.StockMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStockMovement indicates an expected call of CreateStockMovement.
func (mr *MockRepositoryMockRecorder) CreateStockMovement(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStockMovement", reflect.TypeOf((*MockRepository)(nil).CreateStockMovement), ctx, arg)
}

// DeductVariantStock mocks base method.
func (m *MockRepository) DeductVariantStock(ctx context.Context, arg db.DeductVariantStockParams) (db.ProductVariation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductVariantStock", ctx, arg)
	ret0, _ := ret[0].(db.ProductVariation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeductVariantStock indicates an expected call of DeductVariantStock.
func (mr *MockRepositoryMockRecorder) DeductVariantStock(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductVariantStock", reflect.TypeOf((*MockRepository)(nil).DeductVariantStock), ctx, arg)
}

// DeleteAllProductImages mocks base method.
func (m *MockRepository) DeleteAllProductImages(ctx context.Context, arg db.DeleteAllProductImagesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllProductImages", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllProductImages indicates an expected call of DeleteAllProductImages.
func (mr *MockRepositoryMockRecorder) DeleteAllProductImages(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllProductImages", reflect.TypeOf((*MockRepository)(nil).DeleteAllProductImages), ctx, arg)
}

// DeleteAttribute mocks base method.
func (m *MockRepository) DeleteAttribute(ctx context.Context, arg db.DeleteAttributeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttribute", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAttribute indicates an expected call of DeleteAttribute.
func (mr *MockRepositoryMockRecorder) DeleteAttribute(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttribute", reflect.TypeOf((*MockRepository)(nil).DeleteAttribute), ctx, arg)
}

// DeleteCustomer mocks base method.
func (m *MockRepository) DeleteCustomer(ctx context.Context, arg db.DeleteCustomerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockRepositoryMockRecorder) DeleteCustomer(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockRepository)(nil).DeleteCustomer), ctx, arg)
}

// DeleteOrder mocks base method.
func (m *MockRepository) DeleteOrder(ctx context.Context, arg db.DeleteOrderParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockRepositoryMockRecorder) DeleteOrder(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockRepository)(nil).DeleteOrder), ctx, arg)
}

// DeleteOrderItem mocks base method.
func (m *MockRepository) DeleteOrderItem(ctx context.Context, arg db.DeleteOrderItemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderItem", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderItem indicates an expected call of DeleteOrderItem.
func (mr *MockRepositoryMockRecorder) DeleteOrderItem(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderItem", reflect.TypeOf((*MockRepository)(nil).DeleteOrderItem), ctx, arg)
}

// DeleteOrderItemsByOrder mocks base method.
func (m *MockRepository) DeleteOrderItemsByOrder(ctx context.Context, arg db.DeleteOrderItemsByOrderParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderItemsByOrder", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderItemsByOrder indicates an expected call of DeleteOrderItemsByOrder.
func (mr *MockRepositoryMockRecorder) DeleteOrderItemsByOrder(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderItemsByOrder", reflect.TypeOf((*MockRepository)(nil).DeleteOrderItemsByOrder), ctx, arg)
}

// DeleteProduct mocks base method.
func (m *MockRepository) DeleteProduct(ctx context.Context, arg db.DeleteProductParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockRepositoryMockRecorder) DeleteProduct(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockRepository)(nil).DeleteProduct), ctx, arg)
}

// DeleteProductImage mocks base method.
func (m *MockRepository) DeleteProductImage(ctx context.Context, arg db.DeleteProductImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductImage", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductImage indicates an expected call of DeleteProductImage.
func (mr *MockRepositoryMockRecorder) DeleteProductImage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductImage", reflect.TypeOf((*MockRepository)(nil).DeleteProductImage), ctx, arg)
}

// DeleteProductType mocks base method.
func (m *MockRepository) DeleteProductType(ctx context.Context, arg db.DeleteProductTypeParams) (db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductType", ctx, arg)
	ret0, _ := ret[0].(db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProductType indicates an expected call of DeleteProductType.
func (mr *MockRepositoryMockRecorder) DeleteProductType(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductType", reflect.TypeOf((*MockRepository)(nil).DeleteProductType), ctx, arg)
}

// DeleteShop mocks base method.
func (m *MockRepository) DeleteShop(ctx context.Context, shopID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShop", ctx, shopID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShop indicates an expected call of DeleteShop.
func (mr *MockRepositoryMockRecorder) DeleteShop(ctx, shopID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShop", reflect.TypeOf((*MockRepository)(nil).DeleteShop), ctx, shopID)
}

// DeleteShopPaymentMethod mocks base method.
func (m *MockRepository) DeleteShopPaymentMethod(ctx context.Context, arg db.DeleteShopPaymentMethodParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShopPaymentMethod", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShopPaymentMethod indicates an expected call of DeleteShopPaymentMethod.
func (mr *MockRepositoryMockRecorder) DeleteShopPaymentMethod(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShopPaymentMethod", reflect.TypeOf((*MockRepository)(nil).DeleteShopPaymentMethod), ctx, arg)
}

// GetAttribute mocks base method.
func (m *MockRepository) GetAttribute(ctx context.Context, arg db.GetAttributeParams) (db.GetAttributeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttribute", ctx, arg)
	ret0, _ := ret[0].(db.GetAttributeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttribute indicates an expected call of GetAttribute.
func (mr *MockRepositoryMockRecorder) GetAttribute(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttribute", reflect.TypeOf((*MockRepository)(nil).GetAttribute), ctx, arg)
}

// GetAttributeOptions mocks base method.
func (m *MockRepository) GetAttributeOptions(ctx context.Context, arg db.GetAttributeOptionsParams) ([]db.AttributeOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributeOptions", ctx, arg)
	ret0, _ := ret[0].([]db.AttributeOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributeOptions indicates an expected call of GetAttributeOptions.
func (mr *MockRepositoryMockRecorder) GetAttributeOptions(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeOptions", reflect.TypeOf((*MockRepository)(nil).GetAttributeOptions), ctx, arg)
}

// GetAttributes mocks base method.
func (m *MockRepository) GetAttributes(ctx context.Context, arg db.GetAttributesParams) ([]db.GetAttributesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributes", ctx, arg)
	ret0, _ := ret[0].([]db.GetAttributesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributes indicates an expected call of GetAttributes.
func (mr *MockRepositoryMockRecorder) GetAttributes(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributes", reflect.TypeOf((*MockRepository)(nil).GetAttributes), ctx, arg)
}

// GetCategories mocks base method.
func (m *MockRepository) GetCategories(ctx context.Context, arg db.GetCategoriesParams) ([]db.GetCategoriesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", ctx, arg)
	ret0, _ := ret[0].([]db.GetCategoriesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockRepositoryMockRecorder) GetCategories(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockRepository)(nil).GetCategories), ctx, arg)
}

// GetCategory mocks base method.
func (m *MockRepository) GetCategory(ctx context.Context, arg db.GetCategoryParams) (db.GetCategoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, arg)
	ret0, _ := ret[0].(db.GetCategoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockRepositoryMockRecorder) GetCategory(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockRepository)(nil).GetCategory), ctx, arg)
}

// GetCategoryChildren mocks base method.
func (m *MockRepository) GetCategoryChildren(ctx context.Context, arg db.GetCategoryChildrenParams) ([]db.GetCategoryChildrenRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryChildren", ctx, arg)
	ret0, _ := ret[0].([]db.GetCategoryChildrenRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryChildren indicates an expected call of GetCategoryChildren.
func (mr *MockRepositoryMockRecorder) GetCategoryChildren(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryChildren", reflect.TypeOf((*MockRepository)(nil).GetCategoryChildren), ctx, arg)
}

// GetCustomerByEmail mocks base method.
func (m *MockRepository) GetCustomerByEmail(ctx context.Context, arg db.GetCustomerByEmailParams) (db.ShopCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByEmail", ctx, arg)
	ret0, _ := ret[0].(db.ShopCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByEmail indicates an expected call of GetCustomerByEmail.
func (mr *MockRepositoryMockRecorder) GetCustomerByEmail(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByEmail", reflect.TypeOf((*MockRepository)(nil).GetCustomerByEmail), ctx, arg)
}

// GetCustomerById mocks base method.
func (m *MockRepository) GetCustomerById(ctx context.Context, arg db.GetCustomerByIdParams) (db.ShopCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerById", ctx, arg)
	ret0, _ := ret[0].(db.ShopCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerById indicates an expected call of GetCustomerById.
func (mr *MockRepositoryMockRecorder) GetCustomerById(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerById", reflect.TypeOf((*MockRepository)(nil).GetCustomerById), ctx, arg)
}

// GetCustomerOrders mocks base method.
func (m *MockRepository) GetCustomerOrders(ctx context.Context, arg db.GetCustomerOrdersParams) ([]db.GetCustomerOrdersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerOrders", ctx, arg)
	ret0, _ := ret[0].([]db.GetCustomerOrdersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerOrders indicates an expected call of GetCustomerOrders.
func (mr *MockRepositoryMockRecorder) GetCustomerOrders(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerOrders", reflect.TypeOf((*MockRepository)(nil).GetCustomerOrders), ctx, arg)
}

// GetCustomers mocks base method.
func (m *MockRepository) GetCustomers(ctx context.Context, arg db.GetCustomersParams) ([]db.ShopCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomers", ctx, arg)
	ret0, _ := ret[0].([]db.ShopCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomers indicates an expected call of GetCustomers.
func (mr *MockRepositoryMockRecorder) GetCustomers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomers", reflect.TypeOf((*MockRepository)(nil).GetCustomers), ctx, arg)
}

// GetCustomersCount mocks base method.
func (m *MockRepository) GetCustomersCount(ctx context.Context, shopID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomersCount", ctx, shopID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomersCount indicates an expected call of GetCustomersCount.
func (mr *MockRepositoryMockRecorder) GetCustomersCount(ctx, shopID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomersCount", reflect.TypeOf((*MockRepository)(nil).GetCustomersCount), ctx, shopID)
}

// GetInventoryReport mocks base method.
func (m *MockRepository) GetInventoryReport(ctx context.Context, arg db.GetInventoryReportParams) ([]db.GetInventoryReportRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventoryReport", ctx, arg)
	ret0, _ := ret[0].([]db.GetInventoryReportRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventoryReport indicates an expected call of GetInventoryReport.
func (mr *MockRepositoryMockRecorder) GetInventoryReport(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventoryReport", reflect.TypeOf((*MockRepository)(nil).GetInventoryReport), ctx, arg)
}

// GetLowStockVariants mocks base method.
func (m *MockRepository) GetLowStockVariants(ctx context.Context, arg db.GetLowStockVariantsParams) ([]db.GetLowStockVariantsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLowStockVariants", ctx, arg)
	ret0, _ := ret[0].([]db.GetLowStockVariantsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLowStockVariants indicates an expected call of GetLowStockVariants.
func (mr *MockRepositoryMockRecorder) GetLowStockVariants(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLowStockVariants", reflect.TypeOf((*MockRepository)(nil).GetLowStockVariants), ctx, arg)
}

// GetOrder mocks base method.
func (m *MockRepository) GetOrder(ctx context.Context, arg db.GetOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, arg)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockRepositoryMockRecorder) GetOrder(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockRepository)(nil).GetOrder), ctx, arg)
}

// GetOrderByTransactionID mocks base method.
func (m *MockRepository) GetOrderByTransactionID(ctx context.Context, arg db.GetOrderByTransactionIDParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByTransactionID", ctx, arg)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByTransactionID indicates an expected call of GetOrderByTransactionID.
func (mr *MockRepositoryMockRecorder) GetOrderByTransactionID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByTransactionID", reflect.TypeOf((*MockRepository)(nil).GetOrderByTransactionID), ctx, arg)
}

// GetOrderItemsByOrder mocks base method.
func (m *MockRepository) GetOrderItemsByOrder(ctx context.Context, arg db.GetOrderItemsByOrderParams) ([]db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsByOrder", ctx, arg)
	ret0, _ := ret[0].([]db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemsByOrder indicates an expected call of GetOrderItemsByOrder.
func (mr *MockRepositoryMockRecorder) GetOrderItemsByOrder(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsByOrder", reflect.TypeOf((*MockRepository)(nil).GetOrderItemsByOrder), ctx, arg)
}

// GetProduct mocks base method.
func (m *MockRepository) GetProduct(ctx context.Context, arg db.GetProductParams) (db.GetProductRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, arg)
	ret0, _ := ret[0].(db.GetProductRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockRepositoryMockRecorder) GetProduct(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockRepository)(nil).GetProduct), ctx, arg)
}

// GetProductAttributeValues mocks base method.
func (m *MockRepository) GetProductAttributeValues(ctx context.Context, arg db.GetProductAttributeValuesParams) ([]db.GetProductAttributeValuesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductAttributeValues", ctx, arg)
	ret0, _ := ret[0].([]db.GetProductAttributeValuesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductAttributeValues indicates an expected call of GetProductAttributeValues.
func (mr *MockRepositoryMockRecorder) GetProductAttributeValues(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductAttributeValues", reflect.TypeOf((*MockRepository)(nil).GetProductAttributeValues), ctx, arg)
}

// GetProductById mocks base method.
func (m *MockRepository) GetProductById(ctx context.Context, arg db.GetProductByIdParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockRepositoryMockRecorder) GetProductById(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockRepository)(nil).GetProductById), ctx, arg)
}

// GetProductImages mocks base method.
func (m *MockRepository) GetProductImages(ctx context.Context, arg db.GetProductImagesParams) ([]db.ProductImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductImages", ctx, arg)
	ret0, _ := ret[0].([]db.ProductImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductImages indicates an expected call of GetProductImages.
func (mr *MockRepositoryMockRecorder) GetProductImages(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductImages", reflect.TypeOf((*MockRepository)(nil).GetProductImages), ctx, arg)
}

// GetProductType mocks base method.
func (m *MockRepository) GetProductType(ctx context.Context, arg db.GetProductTypeParams) (db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductType", ctx, arg)
	ret0, _ := ret[0].(db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductType indicates an expected call of GetProductType.
func (mr *MockRepositoryMockRecorder) GetProductType(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductType", reflect.TypeOf((*MockRepository)(nil).GetProductType), ctx, arg)
}

// GetProductTypes mocks base method.
func (m *MockRepository) GetProductTypes(ctx context.Context, shopID int64) ([]db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductTypes", ctx, shopID)
	ret0, _ := ret[0].([]db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductTypes indicates an expected call of GetProductTypes.
func (mr *MockRepositoryMockRecorder) GetProductTypes(ctx, shopID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductTypes", reflect.TypeOf((*MockRepository)(nil).GetProductTypes), ctx, shopID)
}

// GetProducts mocks base method.
func (m *MockRepository) GetProducts(ctx context.Context, arg db.GetProductsParams) ([]db.GetProductsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, arg)
	ret0, _ := ret[0].([]db.GetProductsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockRepositoryMockRecorder) GetProducts(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockRepository)(nil).GetProducts), ctx, arg)
}

// GetProductsAttributes mocks base method.
func (m *MockRepository) GetProductsAttributes(ctx context.Context, arg db.GetProductsAttributesParams) ([]db.GetProductsAttributesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsAttributes", ctx, arg)
	ret0, _ := ret[0].([]db.GetProductsAttributesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsAttributes indicates an expected call of GetProductsAttributes.
func (mr *MockRepositoryMockRecorder) GetProductsAttributes(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsAttributes", reflect.TypeOf((*MockRepository)(nil).GetProductsAttributes), ctx, arg)
}

// GetProductsByCategory mocks base method.
func (m *MockRepository) GetProductsByCategory(ctx context.Context, arg db.GetProductsByCategoryParams) ([]db.GetProductsByCategoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByCategory", ctx, arg)
	ret0, _ := ret[0].([]db.GetProductsByCategoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByCategory indicates an expected call of GetProductsByCategory.
func (mr *MockRepositoryMockRecorder) GetProductsByCategory(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByCategory", reflect.TypeOf((*MockRepository)(nil).GetProductsByCategory), ctx, arg)
}

// GetProductsByType mocks base method.
func (m *MockRepository) GetProductsByType(ctx context.Context, arg db.GetProductsByTypeParams) ([]db.GetProductsByTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByType", ctx, arg)
	ret0, _ := ret[0].([]db.GetProductsByTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByType indicates an expected call of GetProductsByType.
func (mr *MockRepositoryMockRecorder) GetProductsByType(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByType", reflect.TypeOf((*MockRepository)(nil).GetProductsByType), ctx, arg)
}

// GetShop mocks base method.
func (m *MockRepository) GetShop(ctx context.Context, shopID int64) (db.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShop", ctx, shopID)
	ret0, _ := ret[0].(db.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShop indicates an expected call of GetShop.
func (mr *MockRepositoryMockRecorder) GetShop(ctx, shopID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShop", reflect.TypeOf((*MockRepository)(nil).GetShop), ctx, shopID)
}

// GetShopBySubDomain mocks base method.
func (m *MockRepository) GetShopBySubDomain(ctx context.Context, defaultSubDomain string) (db.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopBySubDomain", ctx, defaultSubDomain)
	ret0, _ := ret[0].(db.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopBySubDomain indicates an expected call of GetShopBySubDomain.
func (mr *MockRepositoryMockRecorder) GetShopBySubDomain(ctx, defaultSubDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopBySubDomain", reflect.TypeOf((*MockRepository)(nil).GetShopBySubDomain), ctx, defaultSubDomain)
}

// GetShopIDBySubDomain mocks base method.
func (m *MockRepository) GetShopIDBySubDomain(ctx context.Context, subDomain string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopIDBySubDomain", ctx, subDomain)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopIDBySubDomain indicates an expected call of GetShopIDBySubDomain.
func (mr *MockRepositoryMockRecorder) GetShopIDBySubDomain(ctx, subDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopIDBySubDomain", reflect.TypeOf((*MockRepository)(nil).GetShopIDBySubDomain), ctx, subDomain)
}

// GetShopImages mocks base method.
func (m *MockRepository) GetShopImages(ctx context.Context, shopID int64) (db.ShopImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopImages", ctx, shopID)
	ret0, _ := ret[0].(db.ShopImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopImages indicates an expected call of GetShopImages.
func (mr *MockRepositoryMockRecorder) GetShopImages(ctx, shopID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopImages", reflect.TypeOf((*MockRepository)(nil).GetShopImages), ctx, shopID)
}

// GetShopPaymentMethod mocks base method.
func (m *MockRepository) GetShopPaymentMethod(ctx context.Context, arg db.GetShopPaymentMethodParams) (db.ShopPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopPaymentMethod", ctx, arg)
	ret0, _ := ret[0].(db.ShopPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopPaymentMethod indicates an expected call of GetShopPaymentMethod.
func (mr *MockRepositoryMockRecorder) GetShopPaymentMethod(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopPaymentMethod", reflect.TypeOf((*MockRepository)(nil).GetShopPaymentMethod), ctx, arg)
}

// GetShopPaymentMethods mocks base method.
func (m *MockRepository) GetShopPaymentMethods(ctx context.Context, shopID int64) ([]db.ShopPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopPaymentMethods", ctx, shopID)
	ret0, _ := ret[0].([]db.ShopPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopPaymentMethods indicates an expected call of GetShopPaymentMethods.
func (mr *MockRepositoryMockRecorder) GetShopPaymentMethods(ctx, shopID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopPaymentMethods", reflect.TypeOf((*MockRepository)(nil).GetShopPaymentMethods), ctx, shopID)
}

// GetShopsByOwner mocks base method.
func (m *MockRepository) GetShopsByOwner(ctx context.Context, ownerID uuid.UUID) ([]db.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopsByOwner", ctx, ownerID)
	ret0, _ := ret[0].([]db.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopsByOwner indicates an expected call of GetShopsByOwner.
func (mr *MockRepositoryMockRecorder) GetShopsByOwner(ctx, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopsByOwner", reflect.TypeOf((*MockRepository)(nil).GetShopsByOwner), ctx, ownerID)
}

// GetStockMovements mocks base method.
func (m *MockRepository) GetStockMovements(ctx context.Context, arg db.GetStockMovementsParams) ([]db.StockMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockMovements", ctx, arg)
	ret0, _ := ret[0].([]db.StockMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockMovements indicates an expected call of GetStockMovements.
func (mr *MockRepositoryMockRecorder) GetStockMovements(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockMovements", reflect.TypeOf((*MockRepository)(nil).GetStockMovements), ctx, arg)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(ctx context.Context, email *string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, email)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), ctx, email)
}

// GetUserById mocks base method.
func (m *MockRepository) GetUserById(ctx context.Context, userID uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, userID)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockRepositoryMockRecorder) GetUserById(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockRepository)(nil).GetUserById), ctx, userID)
}

// GetUserBySub mocks base method.
func (m *MockRepository) GetUserBySub(ctx context.Context, sub *string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBySub", ctx, sub)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySub indicates an expected call of GetUserBySub.
func (mr *MockRepositoryMockRecorder) GetUserBySub(ctx, sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySub", reflect.TypeOf((*MockRepository)(nil).GetUserBySub), ctx, sub)
}

// GetUserBySubWithShops mocks base method.
func (m *MockRepository) GetUserBySubWithShops(ctx context.Context, sub *string) (db.GetUserBySubWithShopsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBySubWithShops", ctx, sub)
	ret0, _ := ret[0].(db.GetUserBySubWithShopsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySubWithShops indicates an expected call of GetUserBySubWithShops.
func (mr *MockRepositoryMockRecorder) GetUserBySubWithShops(ctx, sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySubWithShops", reflect.TypeOf((*MockRepository)(nil).GetUserBySubWithShops), ctx, sub)
}

// GetVariationsAttributes mocks base method.
func (m *MockRepository) GetVariationsAttributes(ctx context.Context, arg db.GetVariationsAttributesParams) ([]db.GetVariationsAttributesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariationsAttributes", ctx, arg)
	ret0, _ := ret[0].([]db.GetVariationsAttributesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariationsAttributes indicates an expected call of GetVariationsAttributes.
func (mr *MockRepositoryMockRecorder) GetVariationsAttributes(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariationsAttributes", reflect.TypeOf((*MockRepository)(nil).GetVariationsAttributes), ctx, arg)
}

// ListOrders mocks base method.
func (m *MockRepository) ListOrders(ctx context.Context, arg db.ListOrdersParams) ([]db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", ctx, arg)
	ret0, _ := ret[0].([]db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockRepositoryMockRecorder) ListOrders(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockRepository)(nil).ListOrders), ctx, arg)
}

// PgConn mocks base method.
func (m *MockRepository) PgConn() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PgConn")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// PgConn indicates an expected call of PgConn.
func (mr *MockRepositoryMockRecorder) PgConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PgConn", reflect.TypeOf((*MockRepository)(nil).PgConn))
}

// SearchCustomers mocks base method.
func (m *MockRepository) SearchCustomers(ctx context.Context, arg db.SearchCustomersParams) ([]db.ShopCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCustomers", ctx, arg)
	ret0, _ := ret[0].([]db.ShopCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCustomers indicates an expected call of SearchCustomers.
func (mr *MockRepositoryMockRecorder) SearchCustomers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCustomers", reflect.TypeOf((*MockRepository)(nil).SearchCustomers), ctx, arg)
}

// SetShopIDInSession mocks base method.
func (m *MockRepository) SetShopIDInSession(ctx context.Context, shopID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetShopIDInSession", ctx, shopID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetShopIDInSession indicates an expected call of SetShopIDInSession.
func (mr *MockRepositoryMockRecorder) SetShopIDInSession(ctx, shopID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShopIDInSession", reflect.TypeOf((*MockRepository)(nil).SetShopIDInSession), ctx, shopID)
}

// UpdateAttribute mocks base method.
func (m *MockRepository) UpdateAttribute(ctx context.Context, arg db.UpdateAttributeParams) (db.Attribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttribute", ctx, arg)
	ret0, _ := ret[0].(db.Attribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttribute indicates an expected call of UpdateAttribute.
func (mr *MockRepositoryMockRecorder) UpdateAttribute(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttribute", reflect.TypeOf((*MockRepository)(nil).UpdateAttribute), ctx, arg)
}

// UpdateAttributeOption mocks base method.
func (m *MockRepository) UpdateAttributeOption(ctx context.Context, arg db.UpdateAttributeOptionParams) (db.AttributeOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttributeOption", ctx, arg)
	ret0, _ := ret[0].(db.AttributeOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttributeOption indicates an expected call of UpdateAttributeOption.
func (mr *MockRepositoryMockRecorder) UpdateAttributeOption(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttributeOption", reflect.TypeOf((*MockRepository)(nil).UpdateAttributeOption), ctx, arg)
}

// UpdateCategory mocks base method.
func (m *MockRepository) UpdateCategory(ctx context.Context, arg db.UpdateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, arg)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockRepositoryMockRecorder) UpdateCategory(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockRepository)(nil).UpdateCategory), ctx, arg)
}

// UpdateCustomer mocks base method.
func (m *MockRepository) UpdateCustomer(ctx context.Context, arg db.UpdateCustomerParams) (db.ShopCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", ctx, arg)
	ret0, _ := ret[0].(db.ShopCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockRepositoryMockRecorder) UpdateCustomer(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockRepository)(nil).UpdateCustomer), ctx, arg)
}

// UpdateOrder mocks base method.
func (m *MockRepository) UpdateOrder(ctx context.Context, arg db.UpdateOrderParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockRepositoryMockRecorder) UpdateOrder(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockRepository)(nil).UpdateOrder), ctx, arg)
}

// UpdateOrderItem mocks base method.
func (m *MockRepository) UpdateOrderItem(ctx context.Context, arg db.UpdateOrderItemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderItem", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderItem indicates an expected call of UpdateOrderItem.
func (mr *MockRepositoryMockRecorder) UpdateOrderItem(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderItem", reflect.TypeOf((*MockRepository)(nil).UpdateOrderItem), ctx, arg)
}

// UpdateOrderPaymentStatus mocks base method.
func (m *MockRepository) UpdateOrderPaymentStatus(ctx context.Context, arg db.UpdateOrderPaymentStatusParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderPaymentStatus", ctx, arg)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderPaymentStatus indicates an expected call of UpdateOrderPaymentStatus.
func (mr *MockRepositoryMockRecorder) UpdateOrderPaymentStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderPaymentStatus", reflect.TypeOf((*MockRepository)(nil).UpdateOrderPaymentStatus), ctx, arg)
}

// UpdateOrderStatusByTransactionID mocks base method.
func (m *MockRepository) UpdateOrderStatusByTransactionID(ctx context.Context, arg db.UpdateOrderStatusByTransactionIDParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatusByTransactionID", ctx, arg)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatusByTransactionID indicates an expected call of UpdateOrderStatusByTransactionID.
func (mr *MockRepositoryMockRecorder) UpdateOrderStatusByTransactionID(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusByTransactionID", reflect.TypeOf((*MockRepository)(nil).UpdateOrderStatusByTransactionID), ctx, arg)
}

// UpdateProduct mocks base method.
func (m *MockRepository) UpdateProduct(ctx context.Context, arg db.UpdateProductParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockRepositoryMockRecorder) UpdateProduct(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockRepository)(nil).UpdateProduct), ctx, arg)
}

// UpdateProductType mocks base method.
func (m *MockRepository) UpdateProductType(ctx context.Context, arg db.UpdateProductTypeParams) (db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductType", ctx, arg)
	ret0, _ := ret[0].(db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductType indicates an expected call of UpdateProductType.
func (mr *MockRepositoryMockRecorder) UpdateProductType(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductType", reflect.TypeOf((*MockRepository)(nil).UpdateProductType), ctx, arg)
}

// UpdateShop mocks base method.
func (m *MockRepository) UpdateShop(ctx context.Context, arg db.UpdateShopParams) (db.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShop", ctx, arg)
	ret0, _ := ret[0].(db.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShop indicates an expected call of UpdateShop.
func (mr *MockRepositoryMockRecorder) UpdateShop(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShop", reflect.TypeOf((*MockRepository)(nil).UpdateShop), ctx, arg)
}

// UpdateShopPaymentMethodStatus mocks base method.
func (m *MockRepository) UpdateShopPaymentMethodStatus(ctx context.Context, arg db.UpdateShopPaymentMethodStatusParams) (db.ShopPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShopPaymentMethodStatus", ctx, arg)
	ret0, _ := ret[0].(db.ShopPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShopPaymentMethodStatus indicates an expected call of UpdateShopPaymentMethodStatus.
func (mr *MockRepositoryMockRecorder) UpdateShopPaymentMethodStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShopPaymentMethodStatus", reflect.TypeOf((*MockRepository)(nil).UpdateShopPaymentMethodStatus), ctx, arg)
}

// UpdateVariantStock mocks base method.
func (m *MockRepository) UpdateVariantStock(ctx context.Context, arg db.UpdateVariantStockParams) (db.ProductVariation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVariantStock", ctx, arg)
	ret0, _ := ret[0].(db.ProductVariation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVariantStock indicates an expected call of UpdateVariantStock.
func (mr *MockRepositoryMockRecorder) UpdateVariantStock(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariantStock", reflect.TypeOf((*MockRepository)(nil).UpdateVariantStock), ctx, arg)
}

// UpsertCustomer mocks base method.
func (m *MockRepository) UpsertCustomer(ctx context.Context, arg db.UpsertCustomerParams) (db.ShopCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCustomer", ctx, arg)
	ret0, _ := ret[0].(db.ShopCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertCustomer indicates an expected call of UpsertCustomer.
func (mr *MockRepositoryMockRecorder) UpsertCustomer(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCustomer", reflect.TypeOf((*MockRepository)(nil).UpsertCustomer), ctx, arg)
}

// UpsertProductVariants mocks base method.
func (m *MockRepository) UpsertProductVariants(ctx context.Context, arg []db.UpsertProductVariantsParams) *db.UpsertProductVariantsBatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertProductVariants", ctx, arg)
	ret0, _ := ret[0].(*db.UpsertProductVariantsBatchResults)
	return ret0
}

// UpsertProductVariants indicates an expected call of UpsertProductVariants.
func (mr *MockRepositoryMockRecorder) UpsertProductVariants(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProductVariants", reflect.TypeOf((*MockRepository)(nil).UpsertProductVariants), ctx, arg)
}

// UpsertShopPaymentMethod mocks base method.
func (m *MockRepository) UpsertShopPaymentMethod(ctx context.Context, arg db.UpsertShopPaymentMethodParams) (db.ShopPaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertShopPaymentMethod", ctx, arg)
	ret0, _ := ret[0].(db.ShopPaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertShopPaymentMethod indicates an expected call of UpsertShopPaymentMethod.
func (mr *MockRepositoryMockRecorder) UpsertShopPaymentMethod(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertShopPaymentMethod", reflect.TypeOf((*MockRepository)(nil).UpsertShopPaymentMethod), ctx, arg)
}

// UpsertUser mocks base method.
func (m *MockRepository) UpsertUser(ctx context.Context, arg db.UpsertUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockRepositoryMockRecorder) UpsertUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockRepository)(nil).UpsertUser), ctx, arg)
}

// WithTx mocks base method.
func (m *MockRepository) WithTx(ctx context.Context, txFn func(*db.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", ctx, txFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockRepositoryMockRecorder) WithTx(ctx, txFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockRepository)(nil).WithTx), ctx, txFn)
}
