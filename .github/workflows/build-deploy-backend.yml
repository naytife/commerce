name: Build and Deploy Backend

on:
  push:
    branches:
      - dev # Or your main branch
    paths:
      - 'backend/**'
      - '.github/workflows/build-deploy-backend.yml'
      - 'deploy/backend-deployment.yaml'

jobs:
  build-and-deploy:
    environment:
      name: stage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install and Authenticate doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      # Build Docker image
      - name: Build Docker image
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          docker build -t registry.digitalocean.com/${{ secrets.REGISTRY_NAME }}/app:backend-$TAG .
        working-directory: ./backend

      # Push Docker image
      - name: Push Docker image
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          docker push registry.digitalocean.com/${{ secrets.REGISTRY_NAME }}/app:backend-$TAG

      # Update Deployment Image
      - name: Update Deployment Image
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          sed -i "s|registry.digitalocean.com/${{ secrets.REGISTRY_NAME }}/app:backend-latest|registry.digitalocean.com/${{ secrets.REGISTRY_NAME }}/app:backend-$TAG|" $GITHUB_WORKSPACE/deploy/backend-deployment.yaml

      # Save DigitalOcean kubeconfig
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}

      # Ensure Kubernetes Namespace Exists
      - name: Ensure Kubernetes Namespace Exists
        run: kubectl create namespace apps --dry-run=client -o yaml | kubectl apply -f -

      # Apply Kubernetes Secret
      - name: Apply Kubernetes Secret
        run: |
          kubectl create secret generic backend-secrets \
            --from-literal=DATABASE_URL=${{ secrets.APP_DATABASE_URL }} \
            --from-literal=PORT=${{ secrets.PORT }} \
            --namespace=apps \
            --dry-run=client -o yaml | kubectl apply -f -

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/deploy/backend-deployment.yaml

      # Force Deployment Rollout
      - name: Force Deployment Rollout
        run: kubectl rollout restart deployment/backend -n apps

      # Verify Deployment
      - name: Verify Deployment
        run: kubectl rollout status deployment/backend -n apps